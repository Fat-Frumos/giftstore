{
	"info": {
		"_postman_id": "401e891c-86b9-4be2-b5d3-e7c02ba21bf3",
		"name": "tomcat",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10796869"
	},
	"item": [
		{
			"name": "orders",
			"item": [
				{
					"name": "Find orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains required fields for certificates\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).not.to.be.null;\r",
									"    pm.expect(jsonData).not.to.be.undefined;\r",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
									"    for (var i = 0; i < jsonData.length; i++) {\r",
									"        pm.expect(jsonData[i]).to.have.property('id');\r",
									"        pm.expect(jsonData[i]).to.have.property('name');\r",
									"        pm.expect(jsonData[i]).to.have.property('description');\r",
									"        pm.expect(jsonData[i]).to.have.property('price');\r",
									"        pm.expect(jsonData[i]).to.have.property('createDate');\r",
									"        pm.expect(jsonData[i]).to.have.property('lastUpdateDate');\r",
									"        pm.expect(jsonData[i]).to.have.property('duration');\r",
									"        // pm.expect(jsonData[i]).to.have.property('tags');\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find order#1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains required fields for certificates\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).not.to.be.null;\r",
									"    pm.expect(jsonData).not.to.be.undefined;\r",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
									"    for (var i = 0; i < jsonData.length; i++) {\r",
									"        pm.expect(jsonData[i]).to.have.property('id');\r",
									"        pm.expect(jsonData[i]).to.have.property('name');\r",
									"        pm.expect(jsonData[i]).to.have.property('description');\r",
									"        pm.expect(jsonData[i]).to.have.property('price');\r",
									"        pm.expect(jsonData[i]).to.have.property('createDate');\r",
									"        pm.expect(jsonData[i]).to.have.property('lastUpdateDate');\r",
									"        pm.expect(jsonData[i]).to.have.property('duration');\r",
									"        // pm.expect(jsonData[i]).to.have.property('tags');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/orders/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"orders",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get orders Users#1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains required fields for certificates\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).not.to.be.null;\r",
									"    pm.expect(jsonData).not.to.be.undefined;\r",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
									"    for (var i = 0; i < jsonData.length; i++) {\r",
									"        pm.expect(jsonData[i]).to.have.property('id');\r",
									"        pm.expect(jsonData[i]).to.have.property('name');\r",
									"        pm.expect(jsonData[i]).to.have.property('description');\r",
									"        pm.expect(jsonData[i]).to.have.property('price');\r",
									"        pm.expect(jsonData[i]).to.have.property('createDate');\r",
									"        pm.expect(jsonData[i]).to.have.property('lastUpdateDate');\r",
									"        pm.expect(jsonData[i]).to.have.property('duration');\r",
									"        // pm.expect(jsonData[i]).to.have.property('tags');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/certificates/orders/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"certificates",
								"orders",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get orders#1 tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains required fields for certificates\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).not.to.be.null;\r",
									"    pm.expect(jsonData).not.to.be.undefined;\r",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
									"    for (var i = 0; i < jsonData.length; i++) {\r",
									"        pm.expect(jsonData[i]).to.have.property('id');\r",
									"        pm.expect(jsonData[i]).to.have.property('name');\r",
									"        pm.expect(jsonData[i]).to.have.property('description');\r",
									"        pm.expect(jsonData[i]).to.have.property('price');\r",
									"        pm.expect(jsonData[i]).to.have.property('createDate');\r",
									"        pm.expect(jsonData[i]).to.have.property('lastUpdateDate');\r",
									"        pm.expect(jsonData[i]).to.have.property('duration');\r",
									"        // pm.expect(jsonData[i]).to.have.property('tags');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/certificates/1/tags",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"certificates",
								"1",
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "orders/users/1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/orders/users/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"orders",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Certificates/orders/1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/certificates/orders/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"certificates",
								"orders",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get tags",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/tags",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get certificates/1/tags",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/certificates/1/tags",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"certificates",
								"1",
								"tags"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "certificates",
			"item": [
				{
					"name": "get",
					"item": [
						{
							"name": "Find certificates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response certificates contain required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    var embedded = jsonData._embedded;\r",
											"});\r",
											"\r",
											"pm.test(\"Response certificate contains required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].certificate) {\r",
											"        pm.expect(certificate).to.have.property('id');\r",
											"        pm.expect(certificate).to.have.property('name');\r",
											"        pm.expect(certificate).to.have.property('description');\r",
											"        pm.expect(certificate).to.have.property('price');\r",
											"        pm.expect(certificate).to.have.property('createDate');\r",
											"        pm.expect(certificate).to.have.property('lastUpdateDate');\r",
											"        pm.expect(certificate).to.have.property('duration');\r",
											"        pm.expect(certificate).to.have.property('tags').that.is.an('array');\r",
											"        \r",
											"        var tags = certificate.tags;\r",
											"        for (var j = 0; j < tags.length; j++) {\r",
											"            var tag = tags[j];\r",
											"            pm.expect(tag).to.have.property('id');\r",
											"            pm.expect(tag).to.have.property('name');\r",
											"        }\r",
											"    }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/certificates",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"certificates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find certificates?size=100",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response certificates contain required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    var embedded = jsonData._embedded;\r",
											"});\r",
											"\r",
											"pm.test(\"Response certificate contains required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].certificate) {\r",
											"        pm.expect(certificate).to.have.property('id');\r",
											"        pm.expect(certificate).to.have.property('name');\r",
											"        pm.expect(certificate).to.have.property('description');\r",
											"        pm.expect(certificate).to.have.property('price');\r",
											"        pm.expect(certificate).to.have.property('createDate');\r",
											"        pm.expect(certificate).to.have.property('lastUpdateDate');\r",
											"        pm.expect(certificate).to.have.property('duration');\r",
											"        pm.expect(certificate).to.have.property('tags').that.is.an('array');\r",
											"        \r",
											"        var tags = certificate.tags;\r",
											"        for (var j = 0; j < tags.length; j++) {\r",
											"            var tag = tags[j];\r",
											"            pm.expect(tag).to.have.property('id');\r",
											"            pm.expect(tag).to.have.property('name');\r",
											"        }\r",
											"    }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Size parameter should not exceed 25\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var certificates = jsonData.certificates;\r",
											"    if (certificates) {\r",
											"        pm.expect(certificates.length).to.be.at.most(25);\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/certificates?size=100",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"certificates"
									],
									"query": [
										{
											"key": "size",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find certificates By Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response certificates contain required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    var embedded = jsonData._embedded;\r",
											"});\r",
											"\r",
											"pm.test(\"Response certificate contains required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].certificate) {\r",
											"        pm.expect(certificate).to.have.property('id');\r",
											"        pm.expect(certificate).to.have.property('name');\r",
											"        pm.expect(certificate).to.have.property('description');\r",
											"        pm.expect(certificate).to.have.property('price');\r",
											"        pm.expect(certificate).to.have.property('createDate');\r",
											"        pm.expect(certificate).to.have.property('lastUpdateDate');\r",
											"        pm.expect(certificate).to.have.property('duration');\r",
											"        pm.expect(certificate).to.have.property('tags').that.is.an('array');\r",
											"        \r",
											"        var tags = certificate.tags;\r",
											"        for (var j = 0; j < tags.length; j++) {\r",
											"            var tag = tags[j];\r",
											"            pm.expect(tag).to.have.property('id');\r",
											"            pm.expect(tag).to.have.property('name');\r",
											"        }\r",
											"    }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Size parameter should not exceed 25\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var certificates = jsonData.certificates;\r",
											"    if (certificates) {\r",
											"        pm.expect(certificates.length).to.be.at.most(25);\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/certificates?name=Christmas",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"certificates"
									],
									"query": [
										{
											"key": "name",
											"value": "Christmas"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find certificates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response certificates contain required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    var embedded = jsonData._embedded;\r",
											"});\r",
											"\r",
											"pm.test(\"Response certificate contains required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].certificate) {\r",
											"        pm.expect(certificate).to.have.property('id');\r",
											"        pm.expect(certificate).to.have.property('name');\r",
											"        pm.expect(certificate).to.have.property('description');\r",
											"        pm.expect(certificate).to.have.property('price');\r",
											"        pm.expect(certificate).to.have.property('createDate');\r",
											"        pm.expect(certificate).to.have.property('lastUpdateDate');\r",
											"        pm.expect(certificate).to.have.property('duration');\r",
											"        pm.expect(certificate).to.have.property('tags').that.is.an('array');\r",
											"        \r",
											"        var tags = certificate.tags;\r",
											"        for (var j = 0; j < tags.length; j++) {\r",
											"            var tag = tags[j];\r",
											"            pm.expect(tag).to.have.property('id');\r",
											"            pm.expect(tag).to.have.property('name');\r",
											"        }\r",
											"    }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Size parameter should not exceed 25\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var certificates = jsonData.certificates;\r",
											"    if (certificates) {\r",
											"        pm.expect(certificates.length).to.be.at.most(25);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/certificates/?",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"certificates",
										""
									],
									"query": [
										{
											"key": "",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find certificates with contain tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response certificates contain required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    var embedded = jsonData._embedded;\r",
											"});\r",
											"\r",
											"pm.test(\"Response certificate contains required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].certificate) {\r",
											"        pm.expect(certificate).to.have.property('id');\r",
											"        pm.expect(certificate).to.have.property('name');\r",
											"        pm.expect(certificate).to.have.property('description');\r",
											"        pm.expect(certificate).to.have.property('price');\r",
											"        pm.expect(certificate).to.have.property('createDate');\r",
											"        pm.expect(certificate).to.have.property('lastUpdateDate');\r",
											"        pm.expect(certificate).to.have.property('duration');\r",
											"        pm.expect(certificate).to.have.property('tags').that.is.an('array');\r",
											"        \r",
											"        var tags = certificate.tags;\r",
											"        for (var j = 0; j < tags.length; j++) {\r",
											"            var tag = tags[j];\r",
											"            pm.expect(tag).to.have.property('id');\r",
											"            pm.expect(tag).to.have.property('name');\r",
											"        }\r",
											"    }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Size parameter should not exceed 25\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var certificates = jsonData.certificates;\r",
											"    if (certificates) {\r",
											"        pm.expect(certificates.length).to.be.at.most(25);\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/certificates/5/tags",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"certificates",
										"5",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get certificates/5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response certificates contain required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    var embedded = jsonData._embedded;\r",
											"});\r",
											"\r",
											"pm.test(\"Response certificate contains required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].certificate) {\r",
											"        pm.expect(certificate).to.have.property('id');\r",
											"        pm.expect(certificate).to.have.property('name');\r",
											"        pm.expect(certificate).to.have.property('description');\r",
											"        pm.expect(certificate).to.have.property('price');\r",
											"        pm.expect(certificate).to.have.property('createDate');\r",
											"        pm.expect(certificate).to.have.property('lastUpdateDate');\r",
											"        pm.expect(certificate).to.have.property('duration');\r",
											"        pm.expect(certificate).to.have.property('tags').that.is.an('array');\r",
											"        \r",
											"        var tags = certificate.tags;\r",
											"        for (var j = 0; j < tags.length; j++) {\r",
											"            var tag = tags[j];\r",
											"            pm.expect(tag).to.have.property('id');\r",
											"            pm.expect(tag).to.have.property('name');\r",
											"        }\r",
											"    }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Size parameter should not exceed 25\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var certificates = jsonData.certificates;\r",
											"    if (certificates) {\r",
											"        pm.expect(certificates.length).to.be.at.most(25);\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/certificates/5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"certificates",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Certificate/2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response certificates contain required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    var embedded = jsonData._embedded;\r",
											"});\r",
											"\r",
											"pm.test(\"Response certificate contains required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].certificate) {\r",
											"        pm.expect(certificate).to.have.property('id');\r",
											"        pm.expect(certificate).to.have.property('name');\r",
											"        pm.expect(certificate).to.have.property('description');\r",
											"        pm.expect(certificate).to.have.property('price');\r",
											"        pm.expect(certificate).to.have.property('createDate');\r",
											"        pm.expect(certificate).to.have.property('lastUpdateDate');\r",
											"        pm.expect(certificate).to.have.property('duration');\r",
											"        pm.expect(certificate).to.have.property('tags').that.is.an('array');\r",
											"        \r",
											"        var tags = certificate.tags;\r",
											"        for (var j = 0; j < tags.length; j++) {\r",
											"            var tag = tags[j];\r",
											"            pm.expect(tag).to.have.property('id');\r",
											"            pm.expect(tag).to.have.property('name');\r",
											"        }\r",
											"    }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Size parameter should not exceed 25\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var certificates = jsonData.certificates;\r",
											"    if (certificates) {\r",
											"        pm.expect(certificates.length).to.be.at.most(25);\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/certificates/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"certificates",
										"2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update certificate/2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response certificates contain required fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    var embedded = jsonData._embedded;\r",
									"});\r",
									"\r",
									"pm.test(\"Response certificate contains required fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for (var i = 0; i < jsonData.length; i++) {\r",
									"        if (jsonData[i].certificate) {\r",
									"        pm.expect(certificate).to.have.property('id');\r",
									"        pm.expect(certificate).to.have.property('name');\r",
									"        pm.expect(certificate).to.have.property('description');\r",
									"        pm.expect(certificate).to.have.property('price');\r",
									"        pm.expect(certificate).to.have.property('createDate');\r",
									"        pm.expect(certificate).to.have.property('lastUpdateDate');\r",
									"        pm.expect(certificate).to.have.property('duration');\r",
									"        pm.expect(certificate).to.have.property('tags').that.is.an('array');\r",
									"        \r",
									"        var tags = certificate.tags;\r",
									"        for (var j = 0; j < tags.length; j++) {\r",
									"            var tag = tags[j];\r",
									"            pm.expect(tag).to.have.property('id');\r",
									"            pm.expect(tag).to.have.property('name');\r",
									"        }\r",
									"    }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Size parameter should not exceed 25\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var certificates = jsonData.certificates;\r",
									"    if (certificates) {\r",
									"        pm.expect(certificates.length).to.be.at.most(25);\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Spring\",\r\n    \"duration\": 50\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/certificates/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"certificates",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with tag certificate/2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response certificates contain required fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    var embedded = jsonData._embedded;\r",
									"});\r",
									"\r",
									"pm.test(\"Response certificate contains required fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for (var i = 0; i < jsonData.length; i++) {\r",
									"        if (jsonData[i].certificate) {\r",
									"        pm.expect(certificate).to.have.property('id');\r",
									"        pm.expect(certificate).to.have.property('name');\r",
									"        pm.expect(certificate).to.have.property('description');\r",
									"        pm.expect(certificate).to.have.property('price');\r",
									"        pm.expect(certificate).to.have.property('createDate');\r",
									"        pm.expect(certificate).to.have.property('lastUpdateDate');\r",
									"        pm.expect(certificate).to.have.property('duration');\r",
									"        pm.expect(certificate).to.have.property('tags').that.is.an('array');\r",
									"        \r",
									"        var tags = certificate.tags;\r",
									"        for (var j = 0; j < tags.length; j++) {\r",
									"            var tag = tags[j];\r",
									"            pm.expect(tag).to.have.property('id');\r",
									"            pm.expect(tag).to.have.property('name');\r",
									"        }\r",
									"    }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Size parameter should not exceed 25\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var certificates = jsonData.certificates;\r",
									"    if (certificates) {\r",
									"        pm.expect(certificates.length).to.be.at.most(25);\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1,\r\n    \"name\": \" Certificate Gift Summer\",\r\n    \"description\": \"A day of at our spa!\",\r\n    \"price\": 120.00,\r\n    \"tags\": [\r\n        {\r\n            \"id\": 2,\r\n            \"name\": \"Easter\"\r\n        },\r\n        {\r\n            \"id\": 1,\r\n            \"name\": \"ValentineDay\"\r\n        },\r\n        {\r\n            \"id\": 3,\r\n            \"name\": \"ChristmasDay\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/certificates/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"certificates",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save new certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response certificates contain required fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    var embedded = jsonData._embedded;\r",
									"});\r",
									"\r",
									"pm.test(\"Response certificate contains required fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for (var i = 0; i < jsonData.length; i++) {\r",
									"        if (jsonData[i].certificate) {\r",
									"        pm.expect(certificate).to.have.property('id');\r",
									"        pm.expect(certificate).to.have.property('name');\r",
									"        pm.expect(certificate).to.have.property('description');\r",
									"        pm.expect(certificate).to.have.property('price');\r",
									"        pm.expect(certificate).to.have.property('createDate');\r",
									"        pm.expect(certificate).to.have.property('lastUpdateDate');\r",
									"        pm.expect(certificate).to.have.property('duration');\r",
									"        pm.expect(certificate).to.have.property('tags').that.is.an('array');        \r",
									"    }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Size parameter should not exceed 25\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var certificates = jsonData.certificates;\r",
									"    if (certificates) {\r",
									"        pm.expect(certificates.length).to.be.at.most(25);\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \" Certificate Gift Summer\",\r\n    \"description\": \"A day of at our spa!\",\r\n    \"price\": 100.00,\r\n    \"duration\": 120\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/certificates",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete certificate/11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.response.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Spring\",\r\n    \"duration\": 50\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/certificates/11",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"certificates",
								"11"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tags",
			"item": [
				{
					"name": "get",
					"item": [
						{
							"name": "Find tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response certificates contain required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"Response tags contains required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].tags) {\r",
											"            jsonData[i].tags.forEach(function(tag) {\r",
											"             pm.expect(tag).to.have.property('id');\r",
											"                pm.expect(tag).to.have.property('name');\r",
											"            });\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Size parameter should not exceed 25\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var certificates = jsonData.certificates;\r",
											"    if (certificates) {\r",
											"        pm.expect(certificates.length).to.be.at.most(25);\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/tags",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find tags/5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response certificates contain required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"Response tags contains required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].tags) {\r",
											"            jsonData[i].tags.forEach(function(tag) {\r",
											"             pm.expect(tag).to.have.property('id');\r",
											"                pm.expect(tag).to.have.property('name');\r",
											"            });\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Size parameter should not exceed 25\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var certificates = jsonData.certificates;\r",
											"    if (certificates) {\r",
											"        pm.expect(certificates.length).to.be.at.most(25);\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/tags/5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"tags",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find tags with required fields test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response certificates contain required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"Response tags contains required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].tags) {\r",
											"            jsonData[i].tags.forEach(function(tag) {\r",
											"             pm.expect(tag).to.have.property('id');\r",
											"                pm.expect(tag).to.have.property('name');\r",
											"            });\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Size parameter should not exceed 25\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var certificates = jsonData.certificates;\r",
											"    if (certificates) {\r",
											"        pm.expect(certificates.length).to.be.at.most(25);\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/tags?3,4,5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"tags"
									],
									"query": [
										{
											"key": "3,4,5",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find tags#1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response tags contains required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].tags) {\r",
											"            jsonData[i].tags.forEach(function(tag) {\r",
											"             pm.expect(tag).to.have.property('id');\r",
											"                pm.expect(tag).to.have.property('name');\r",
											"            });\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/tags/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"tags",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Save new tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response tags contains required fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for (var i = 0; i < jsonData.length; i++) {\r",
									"        if (jsonData[i].tags) {\r",
									"            jsonData[i].tags.forEach(function(tag) {\r",
									"             pm.expect(tag).to.have.property('id');\r",
									"                pm.expect(tag).to.have.property('name');\r",
									"            });\r",
									"        }\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Winter\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/tags",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete tags/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.response.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/tags/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"tags",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}