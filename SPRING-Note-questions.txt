What is a Spring?	an application framework and inversion of control container for the Java platform. The framework's core features can be used by any Java application, but there are extensions for building web applications on top of the Java EE platform." Spring is essentially a lightweight, integrated framework that can be used for developing enterprise applications in java
Name the different modules of the Spring framework.	Some of the important Spring Framework modules are:  Spring Context - for dependency injection.  Spring AOP - for aspect oriented programming.  Spring DAO - for database operations using DAO pattern  Spring JDBC - for JDBC and DataSource support.  Spring ORM - for ORM tools support such as Hibernate  Spring Web Module - for creating web applications.  Spring MVC - Model-View-Controller implementation for creating web applications, web services etc.
List some of the important annotations in annotation-based Spring configuration.	" @Required @Autowired @Qualifier @Resource @PostConstruct @PreDestroy"
Explain Bean in Spring and List the different Scopes of Spring bean.	"Singleton: Only one instance of the bean will be created for each container. This is the default scope for the spring beans. While using this scope, make sure spring bean doesn't have shared instance variables otherwise it might lead to data inconsistency issues because it's not thread-safe. Prototype: A new instance will be created every time the bean is requested. Request: This is same as prototype scope, however it's meant to be used for web applications. A new instance of the bean will be created for each HTTP request. Session: A new bean will be created for each HTTP session by the container. Global-session: This is used to create global session beans for Portlet applications."
Explain the role of DispatcherServlet and ContextLoaderListener.	DispatcherServlet is basically the front controller in the Spring MVC application as it loads the spring bean configuration file and initializes all the beans that have been configured. If annotations are enabled, it also scans the packages to configure any bean annotated with @Component, @Controller, @Repository or @Service annotations  ContextLoaderListener, on the other hand, is the listener to start up and shut down the WebApplicationContext in Spring root. Some of its important functions includes tying up the lifecycle of Application Context to the lifecycle of the ServletContext and automating the creation of ApplicationContext.
What are the differences between constructor injection and setter injection?	Partial dependency: can be injected using setter injection but it is not possible by constructor.  Overriding: Setter injection overrides the constructor injection. If we use both constructor and setter injection, IOC container will use the setter injection. Changes: We can easily change the value by setter injection. It doesn't create a new bean instance always like constructor. So setter injection is flexible than constructor injection.
What is autowiring in Spring? What are the autowiring modes?	Autowiring feature of spring framework enables you to inject the object dependency implicitly. It internally uses setter or constructor injection. Autowiring can't be used to inject primitive and string values. It works with reference only.
How to handle exceptions in Spring MVC Framework?	Spring MVC Framework provides following ways to help us achieving robust exception handling.  Controller Based: We can define exception handler methods in our controller classes. All we need is to annotate these methods with @ExceptionHandler annotation.  Global Exception Handler: Exception Handling is a cross-cutting concern and Spring provides @ControllerAdvice annotation that we can use with any class to define our global exception handler.  HandlerExceptionResolver implementation: For generic exceptions, most of the times we serve static pages. Spring Framework provides HandlerExceptionResolver interface that we can implement to create global exception handler. The reason behind this additional way to define global exception handler is that Spring framework also provides default implementation classes that we can define in our spring bean configuration file to get spring framework exception handling benefits.
What are some of the important Spring annotations which you have used?	"Some of the Spring annotations that I have used in my project are:  @ComponentScan @ImportResource @Configuration @Autowired @Bean @Resource @Controller - for controller classes in Spring MVC project.  @RequestMapping - for configuring URI mapping in controller handler methods. This is a very important annotation, so you should go through Spring MVC RequestMapping Annotation Examples  @ResponseBody - for sending Object as response, usually for sending XML or JSON data as response. @PathVariable - for mapping dynamic values from the URI to handler method arguments.  @Autowired - for autowiring dependencies in spring beans.  @Qualifier - with @Autowired annotation to avoid confusion when multiple instances of bean type is present. @Service - for service classes.  @Scope - for configuring scope of the spring bean. @Configuration,  @ComponentScan and @Bean - for java based configurations. AspectJ annotations for configuring aspects and advices, @Aspect, @Before, @After, @Around, @Pointcut etc."
How to integrate Spring and Hibernate Frameworks?	"We can use Spring ORM module to integrate Spring and Hibernate frameworks, if you are using Hibernate 3+ where SessionFactory provides current session, then you should avoid using HibernateTemplate or HibernateDaoSupport classes and better to use DAO pattern with dependency injection for the integration. Also Spring ORM provides support for using Spring declarative transaction management, so you should utilize that rather than going for hibernate boiler-plate code for transaction management."
What is Hibernate Framework?	"Object-relational mapping or ORM is the programming technique to map application domain model objects to the relational database tables. Hibernate is java based ORM tool that provides framework for mapping application domain objects to the relational database tables and vice versa. Hibernate provides reference implementation of Java Persistence API, that makes it a great choice as ORM tool with benefits of loose coupling. We can use Hibernate persistence API for CRUD operations. Hibernate framework provide option to map plain old java objects to traditional database tables with the use of JPA annotations as well as XML based configuration. Similarly hibernate configurations are flexible and can be done from XML configuration file as well as programmatically."
What are the autowiring modes?	no - It is the default autowiring mode. It means no autowiring bydefault. byName - The byName mode injects the object dependency according to name of the bean. In such case, property name and bean name must be same. It internally calls setter method. byType - The byType mode injects the object dependency according to type. So property name and bean name can be different. It internally calls setter method. constructor - The constructor mode injects the dependency by calling the constructor of the class. It calls the constructor having large number of parameters. autodetect - It is deprecated since Spring 3.
Describe @ComponentScan	When developing Spring Boot applications, you need to tell the Spring Framework where to look for Spring components. Using component scan is one method of asking Spring to detect Spring-managed components. Spring needs the information to locate and register all the Spring components with the application context when the application starts.
What is Spring Framework?	"Spring is one of the most widely used Java EE framework. Spring framework core concepts are "Dependency Injection" and "Aspect Oriented Programming". Spring framework can be used in normal java applications also to achieve loose coupling between different components by implementing dependency injection and we can perform cross cutting tasks such as logging and authentication using spring support for aspect oriented programming. I like spring because it provides a lot of features and different modules for specific tasks such as Spring MVC and Spring JDBC. Since it's an open source framework with a lot of online resources and active community members, working with Spring framework is easy and fun at same time."
What do you understand by Dependency Injection?	"Dependency Injection design pattern allows us to remove the hard-coded dependencies and make our application loosely coupled, extendable and maintainable. We can implement dependency injection pattern to move the dependency resolution from compile-time to runtime. Some of the benefits of using Dependency Injection are: Separation of Concerns, Boilerplate Code reduction, Configurable components and easy unit testing. Read more at Dependency Injection Tutorial. We can also use Google Guice for Dependency Injection to automate the process of dependency injection. But in most of the cases we are looking for more than just dependency injection and that's why Spring is the top choice for this."
How do we implement DI in Spring Framework?	We can use Spring XML based as well as Annotation based configuration to implement DI in spring applications. For better understanding, please read Spring Dependency Injection example where you can learn both the ways with JUnit test case. The post also contains sample project zip file, that you can download and play around to learn more.
what are the benefits of using Spring Tool Suite?	"We can install plugins into Eclipse to get all the features of Spring Tool Suite. However STS comes with Eclipse with some other important stuffs such as Maven support, Templates for creating different types of Spring projects and tc server for better performance with Spring applications. I like STS because it highlights the Spring components and if you are using AOP pointcuts and advices, then it clearly shows which methods will come under the specific pointcut. So rather than installing everything on our own, I prefer using STS when developing Spring based applications."
Name some of the important Spring Modules?	"Spring Context - for dependency injection. Spring AOP - for aspect oriented programming. Spring DAO - for database operations using DAO pattern Spring JDBC - for JDBC and DataSource support. Spring ORM - for ORM tools support such as Hibernate Spring Web Module - for creating web applications. Spring MVC - Model-View-Controller implementation for creating web applications, web services etc."
What do you understand by Aspect Oriented Programming?	"Enterprise applications have some common cross-cutting concerns that is applicable for different types of Objects and application modules, such as logging, transaction management, data validation, authentication etc. In Object Oriented Programming, modularity of application is achieved by Classes whereas in AOP application modularity is achieved by Aspects and they are configured to cut across different classes methods. AOP takes out the direct dependency of cross-cutting tasks from classes that is not possible in normal object oriented programming. For example, we can have a separate class for logging but again the classes will have to call these methods for logging the data. Read more about Spring AOP support at Spring AOP Example."
What is Aspect, Advice, Pointcut, JointPoint and Advice Arguments in AOP?	"Aspect: Aspect is a class that implements cross-cutting concerns, such as transaction management. Aspects can be a normal class configured and then configured in Spring Bean configuration file or we can use Spring AspectJ support to declare a class as Aspect using @Aspect annotation. Advice: Advice is the action taken for a particular join point. In terms of programming, they are methods that gets executed when a specific join point with matching pointcut is reached in the application. You can think of Advices as Spring interceptors or Servlet Filters. Pointcut: Pointcut are regular expressions that is matched with join points to determine whether advice needs to be executed or not. Pointcut uses different kinds of expressions that are matched with the join points. Spring framework uses the AspectJ pointcut expression language for determining the join points where advice methods will be applied. Join Point: A join point is the specific point in the application such as method execution, exception handling, changing object variable values etc. In Spring AOP a join points is always the execution of a method. Advice Arguments: We can pass arguments in the advice methods. We can use args() expression in the pointcut to be applied to any method that matches the argument pattern. If we use this, then we need to use the same name in the advice method from where argument type is determined. These concepts seems confusing at first, but if you go through Spring Aspect, Advice Example then you can easily relate to them."
What is the difference between Spring AOP and AspectJ AOP?	"AspectJ is the industry-standard implementation for Aspect Oriented Programming whereas Spring implements AOP for some cases. Main differences between Spring AOP and AspectJ are: Spring AOP is simpler to use than AspectJ because we don't need to worry about the weaving process. Spring AOP supports AspectJ annotations, so if you are familiar with AspectJ then working with Spring AOP is easier. Spring AOP supports only proxy-based AOP, so it can be applied only to method execution join points. AspectJ support all kinds of pointcuts. One of the shortcoming of Spring AOP is that it can be applied only to the beans created through Spring Context."
What is Spring IoC Container?	"Inversion of Control (IoC) is the mechanism to achieve loose-coupling between Objects dependencies. To achieve loose coupling and dynamic binding of the objects at runtime, the objects define their dependencies that are being injected by other assembler objects. Spring IoC container is the program that injects dependencies into an object and make it ready for our use. Spring Framework IoC container classes are part of org.springframework.beans and org.springframework.context packages and provides us different ways to decouple the object dependencies. Some of the useful ApplicationContext implementations that we use are;  AnnotationConfigApplicationContext: For standalone java applications using annotations based configuration.  ClassPathXmlApplicationContext: For standalone java applications using XML based configuration.  FileSystemXmlApplicationContext: Similar to ClassPathXmlApplicationContext except that the xml configuration file can be loaded from anywhere in the file system.  AnnotationConfigWebApplicationContext and XmlWebApplicationContext for web applications."
What is a Spring Bean?	"Any normal java class that is initialized by Spring IoC container is called Spring Bean. We use Spring ApplicationContext to get the Spring Bean instance. Spring IoC container manages the life cycle of Spring Bean, bean scopes and injecting any required dependencies in the bean."
What is the importance of Spring bean configuration file?	"We use Spring Bean configuration file to define all the beans that will be initialized by Spring Context. When we create the instance of Spring ApplicationContext, it reads the spring bean xml file and initialize all of them. Once the context is initialized, we can use it to get different bean instances. Apart from Spring Bean configuration, this file also contains spring MVC interceptors, view resolvers and other elements to support annotations based configurations."
What are different ways to configure a class as Spring Bean?	"There are three different ways to configure Spring Bean.  XML Configuration: This is the most popular configuration and we can use bean element in context file to configure a Spring Bean. For example: <bean name=""myBean"" class=""com.journaldev.spring.beans.MyBean""></bean> Java Based Configuration: If you are using only annotations, you can configure a Spring bean using @Bean annotation. This annotation is used with  @Configuration classes to configure a spring bean. Sample configuration is:  @Configuration @ComponentScan(value=""com.journaldev.spring.main"")  public class MyConfiguration { @Bean public MyService getService(){ return new MyService(); } }  To get this bean from spring context, we need to use following code snippet: AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext( MyConfiguration.class);  MyService service = ctx.getBean(MyService.class);  Annotation Based Configuration: We can also use @Component, @Service, @Repository and @Controller annotations with classes to configure them to be as spring bean.  For these, we would need to provide base package location to scan for these classes. For example: <context:component-scan base-package=""com.journaldev.spring"" />"
What are different scopes of Spring Bean?	There are five scopes defined for Spring Beans.  singleton: Only one instance of the bean will be created for each container. This is the default scope for the spring beans. While using this scope, make sure spring bean doesn't have shared instance variables otherwise it might lead to data inconsistency issues because it's not thread-safe.  prototype: A new instance will be created every time the bean is requested. request: This is same as prototype scope, however it's meant to be used for web applications. A new instance of the bean will be created for each HTTP request.  session: A new bean will be created for each HTTP session by the container.  global-session: This is used to create global session beans for Portlet applications. Spring Framework is extendable and we can create our own scopes too, however most of the times we are good with the scopes provided by the framework.  To set spring bean scopes we can use "scope" attribute in bean element or @Scope annotation for annotation based configurations.
What is Spring Bean life cycle?	"Spring Beans are initialized by Spring Container and all the dependencies are also injected. When context is destroyed, it also destroys all the initialized beans. This works well in most of the cases but sometimes we want to initialize other resources or do some validation before making our beans ready to use. Spring framework provides support for post-initialization and pre-destroy methods in spring beans. We can do this by two ways - by implementing InitializingBean and DisposableBean interfaces or using init-method and destroy-method attribute in spring bean configurations. For more details, please read Spring Bean Life Cycle Methods."
How to get ServletContext and ServletConfig object in a Spring Bean?	There are two ways to get Container specific objects in the spring bean.  Implementing SpringAware interfaces, for these ServletContextAware and ServletConfigAware interfaces
What is Bean wiring and @Autowired annotation?	"The process of injection spring bean dependencies while initializing it called Spring Bean Wiring. Usually it's best practice to do the explicit wiring of all the bean dependencies, but spring framework also supports autowiring. We can use @Autowired annotation with fields or methods for autowiring byType. For this annotation to work, we also need to enable annotation based configuration in spring bean configuration file. This can be done by context:annotation-config element."
What are different types of Spring Bean autowiring?	There are four types of autowiring in Spring framework.  autowire byName  autowire byType  autowire by constructor  autowiring by @Autowired and @Qualifier annotations Prior to Spring 3.1,  autowire by autodetect was also supported that was similar to autowire by constructor or byType.
Does Spring Bean provide thread safety?	"The default scope of Spring bean is singleton, so there will be only one instance per context. That means that all the having a class level variable that any thread can update will lead to inconsistent data. Hence in default mode spring beans are not thread-safe. However we can change spring bean scope to request, prototype or session to achieve thread-safety at the cost of performance. It's a design decision and based on the project requirements."
What is a Controller in Spring MVC?	"Just like MVC design pattern, Controller is the class that takes care of all the client requests and send them to the configured resources to handle it. In Spring MVC, org.springframework.web.servlet.DispatcherServlet is the front controller class that initializes the context based on the spring beans configurations. A Controller class is responsible to handle different kind of client requests based on the request mappings. We can create a controller class by using @Controller annotation. Usually it's used with @RequestMapping annotation to define handler methods for specific URI mapping."
What's the difference between @Component, @Controller, @Repository & @Service annotations in Spring?	@Component is used to indicate that a class is a component. These classes are used for auto detection and configured as bean, when annotation based configurations are used.  @Controller is a specific type of component, used in MVC applications and mostly used with RequestMapping annotation.  @Repository annotation is used to indicate that a component is used as repository and a mechanism to store/retrieve/search data. We can apply this annotation with DAO pattern implementation classes.  @Service is used to indicate that a class is a Service. Usually the business facade classes that provide some services are annotated with this.  We can use any of the above annotations for a class for auto-detection but different types are provided so that you can easily distinguish the purpose of the annotated classes."
What is DispatcherServlet and ContextLoaderListener?	DispatcherServlet is the front controller in the Spring MVC application and it loads the spring bean configuration file and initialize all the beans that are configured. If annotations are enabled, it also scans the packages and configure any bean annotated with @Component, @Controller, @Repository or @Service annotations.  ContextLoaderListener is the listener to start up and shut down Spring's root WebApplicationContext. It's important functions are to tie up the lifecycle of ApplicationContext to the lifecycle of the ServletContext and to automate the creation of ApplicationContext. We can use it to define shared beans that can be used across different spring contexts.
What is ViewResolver in Spring?	"ViewResolver implementations are used to resolve the view pages by name. Usually we configure it in the spring bean configuration file. For example: <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory --> <beans:bean class=""org.springframework.web.servlet.view.InternalResourceViewResolver""> <beans:property name=""prefix"" value=""/WEB-INF/views/"" /> <beans:property name=""suffix"" value="".jsp"" /> </beans:bean> InternalResourceViewResolver is one of the implementation of ViewResolver interface and we are providing the view pages directory and suffix location through the bean properties. So if a controller handler method returns "home", view resolver will use view page located at /WEB-INF/views/home.jsp."
What is a MultipartResolver and when its used?	MultipartResolver interface is used for uploading files - CommonsMultipartResolver and StandardServletMultipartResolver are two implementations provided by spring framework for file uploading.  By default there are no multipart resolvers configured but to use them for uploading files, all we need to define a bean named "multipartResolver" with type as MultipartResolver in spring bean configurations. Once configured, any multipart request will be resolved by the configured MultipartResolver and pass on a wrapped HttpServletRequest. Then it's used in the controller class to get the file and process it. For a complete example, please read Spring MVC File Upload Example.
How to handle exceptions in Spring MVC Framework?	"Spring MVC Framework provides following ways to help us achieving robust exception handling. Controller Based - We can define exception handler methods in our controller classes. All we need is to annotate these methods with @ExceptionHandler annotation. Global Exception Handler - Exception Handling is a cross-cutting concern and Spring provides @ControllerAdvice annotation that we can use with any class to define our global exception handler. HandlerExceptionResolver implementation - For generic exceptions, most of the times we serve static pages. Spring Framework provides HandlerExceptionResolver interface that we can implement to create global exception handler. The reason behind this additional way to define global exception handler is that Spring framework also provides default implementation classes that we can define in our spring bean configuration file to get spring framework exception handling benefits."
How to create ApplicationContext in a Java Program?	There are following ways to create spring context in a standalone java program. AnnotationConfigApplicationContext: If we are using Spring in standalone java applications and using annotations for Configuration, then we can use this to initialize the container and get the bean objects.  ClassPathXmlApplicationContext: If we have spring bean configuration xml file in standalone application, then we can use this class to load the file and get the container object.  FileSystemXmlApplicationContext: This is similar to ClassPathXmlApplicationContext except that the xml configuration file can be loaded from anywhere in the file system.
Can we have multiple Spring configuration files?	"For Spring MVC applications, we can define multiple spring context configuration files through contextConfigLocation. This location string can consist of multiple locations separated by any number of commas and spaces. For example;<servlet><servlet-name>appServlet</servlet-name><servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class><init-param><param-name>contextConfigLocation</param-name><param-value>/WEB-INF/spring/appServlet/servlet-context.xml,/WEB-INF/spring/appServlet/servlet-jdbc.xml</param-value></init-param><load-on-startup>1</load-on-startup></servlet>We can also define multiple root level spring configurations and load it through context-param. For example;<context-param><param-name>contextConfigLocation</param-name><param-value>/WEB-INF/spring/root-context.xml /WEB-INF/spring/root-security.xml</param-value></context-param>Another option is to use import element in the context configuration file to import other configurations, for example:<beans:import resource=""spring-jdbc.xml""/>"
What is ContextLoaderListener?	"ContextLoaderListener is the listener class used to load root context and define spring bean configurations that will be visible to all other contexts. It's configured in web.xml file as: <context-param> <param-name>contextConfigLocation</param-name> <param-value>/WEB-INF/spring/root-context.xml</param-value> </context-param> <listener> <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class> </listener>"
What are the minimum configurations needed to create Spring MVC application?	To create a simple Spring MVC application, we would need to do following tasks.  - Add spring-context and spring-webmvc dependencies in the project.  - Configure DispatcherServlet in the web.xml file to handle requests through spring container.  - Spring bean configuration file to define beans, if using annotations then it has to be configured here.  - Also we need to configure view resolver for view pages.  - Controller class with request mappings defined to handle the client requests.
How would you relate Spring MVC Framework to MVC architecture?	"As the name suggests Spring MVC is built on top of Model-View-Controller architecture. DispatcherServlet is the Front Controller in the Spring MVC application that takes care of all the incoming requests and delegate it to different controller handler methods. Model can be any Java Bean in the Spring Framework, just like any other MVC framework Spring provides automatic binding of form data to java beans. We can set model beans as attributes to be used in the view pages. View Pages can be JSP, static HTMLs etc. and view resolvers are responsible for finding the correct view page. Once the view page is identified, control is given back to the DispatcherServlet controller. DispatcherServlet is responsible for rendering the view and returning the final response to the client."
How to achieve localization in Spring MVC applications?	Spring provides excellent support for localization or i18n through resource bundles. Basis steps needed to make our application localized are:  Creating message resource bundles for different locales, such as messages_en.properties, messages_fr.properties etc.  Defining messageSource bean in the spring bean configuration file of type ResourceBundleMessageSource or ReloadableResourceBundleMessageSource. For change of locale support, define localeResolver bean of type CookieLocaleResolver and configure LocaleChangeInterceptor interceptor. Example configuration can be like below: <beans:bean id=""messageSource"" class=""org.springframework.context.support.ReloadableResourceBundleMessageSource""> <beans:property name=""basename"" value=""classpath:messages"" /> <beans:property name=""defaultEncoding"" value=""UTF-8"" /> </beans:bean><beans:bean id=""localeResolver"" class=""org.springframework.web.servlet.i18n.CookieLocaleResolver""> <beans:property name=""defaultLocale"" value=""en"" /> <beans:property name=""cookieName"" value=""myAppLocaleCookie""> </beans:property><beans:property name=""cookieMaxAge"" value=""3600""> </beans:property></beans:bean> <interceptors> <beans:bean class=""org.springframework.web.servlet.i18n.LocaleChangeInterceptor""> <beans:property name=""paramName"" value=""locale"" /> </beans:bean> </interceptors>Use spring:message element in the view pages with key names, DispatcherServlet picks the corresponding value and renders the page in corresponding locale and return as response. For a complete example, please read Spring Localization Example.
How can we use Spring to create Restful Web Service returning JSON response?	"We can use Spring Framework to create Restful web services that returns JSON data. Spring provides integration with Jackson JSON API that we can use to send JSON response in restful web service. We would need to do following steps to configure our Spring MVC application to send JSON response: Adding Jackson JSON dependencies, if you are using Maven it can be done with following code:<!-- Jackson --><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-databind</artifactId><version>${jackson.databind-version}</version></dependency>Configure RequestMappingHandlerAdapter bean in the spring bean configuration file and set the messageConverters property to MappingJackson2HttpMessageConverter bean. Sample configuration will be:<!-- Configure to plugin JSON as request and response in method handler --><beans:bean class=""org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter""><beans:property name=""messageConverters""><beans:list><beans:ref bean=""jsonMessageConverter""/></beans:list></beans:property></beans:bean><!-- Configure bean to convert JSON to POJO and vice versa --><beans:bean id=""jsonMessageConverter"" class=""org.springframework.http.converter.json.MappingJackson2HttpMessageConverter""></beans:bean>In the controller handler methods, return the Object as response using @ResponseBody annotation. Sample code: @RequestMapping(value = EmpRestURIConstants.GET_EMP, method = RequestMethod.GET) public @ResponseBody Employee getEmployee(@PathVariable(""id"") int empId) { logger.info(""Start getEmployee. ID=""+empId); return empData.get(empId); } You can invoke the rest service through any API, but if you want to use Spring then we can easily do it using RestTemplate class."
What are some of the important Spring annotations you have used?	Some of the Spring annotations that I have used in my project are:  @Controller - for controller classes in Spring MVC project.  @RequestMapping - for configuring URI mapping in controller handler methods. This is a very important annotation, so you should go through Spring MVC RequestMapping Annotation Examples  @ResponseBody - for sending Object as response, usually for sending XML or JSON data as response.  @PathVariable - for mapping dynamic values from the URI to handler method arguments.  @Autowired - for autowiring dependencies in spring beans. @Qualifier - with @Autowired annotation to avoid confusion when multiple instances of bean type is present.  @Service - for service classes.  @Scope - for configuring scope of the spring bean. @Configuration, @ComponentScan and @Bean - for java based configurations. AspectJ annotations for configuring aspects and advices, @Aspect, @Before, @After, @Around, @Pointcut etc.
Can we send an Object as the response of Controller handler method?	Yes we can, using @ResponseBody annotation. This is how we send JSON or XML based response in restful web services.
How to upload file in Spring MVC Application?	Spring provides built-in support for uploading files through MultipartResolver interface implementations. It's very easy to use and requires only configuration changes to get it working. Obviously we would need to write controller handler method to handle the incoming file and process it. For a complete example, please refer Spring File Upload Example.
How to validate form data in Spring Web MVC Framework?	"Spring supports JSR-303 annotation based validations as well as provide Validator interface that we can implement to create our own custom validator. For using JSR-303 based validation, we need to annotate bean variables with the required validations. For custom validator implementation, we need to configure it in the controller class."
What is Spring MVC Interceptor and how to use it?	"Spring MVC Interceptors are like Servlet Filters and allow us to intercept client request and process it. We can intercept client request at three places - preHandle, postHandle and afterCompletion. We can create spring interceptor by implementing HandlerInterceptor interface or by extending abstract class HandlerInterceptorAdapter. We need to configure interceptors in the spring bean configuration file. We can define an interceptor to intercept all the client requests or we can configure it for specific URI mapping too. "
What is Spring JdbcTemplate class and how to use it?	Spring Framework provides excellent integration with JDBC API and provides JdbcTemplate utility class that we can use to avoid bolier-plate code from our database operations logic such as Opening/Closing Connection, ResultSet, PreparedStatement etc. i.e.  String selectQuery = "select * from Student"; List <Student> students = jdbcTemplateObject.query(selectQuery, new StudentMapper());
How to use Tomcat JNDI DataSource in Spring Web Application?	"For using servlet container configured JNDI DataSource, we need to configure it in the spring bean configuration file and then inject it to spring beans as dependencies. Then we can use it with JdbcTemplate to perform database operations. Sample configuration would be:<beans:bean id=""dbDataSource"" class=""org.springframework.jndi.JndiObjectFactoryBean""><beans:property name=""jndiName"" value=""java:comp/env/jdbc/MyLocalDB""/></beans:bean>"
How would you achieve Transaction Management in Spring?	Spring framework provides transaction management support through Declarative Transaction Management as well as programmatic transaction management. Declarative transaction management is most widely used because it's easy to use and works in most of the cases. We use annotate a method with @Transactional annotation for Declarative transaction management. We need to configure transaction manager for the DataSource in the spring bean configuration file. <bean id=""transactionManager"" class=""org.springframework.jdbc.datasource.DataSourceTransactionManager""> <property name=""dataSource"" ref=""dataSource"" /> </bean>
What is Spring DAO?	"Spring DAO support is provided to work with data access technologies like JDBC, Hibernate in a consistent and easy way. For example we have JdbcDaoSupport, HibernateDaoSupport, JdoDaoSupport and JpaDaoSupport for respective technologies. Spring DAO also provides consistency in exception hierarchy and we don't need to catch specific exceptions."
How to integrate Spring and Hibernate Frameworks?	"We can use Spring ORM module to integrate Spring and Hibernate frameworks, if you are using Hibernate 3+ where SessionFactory provides current session, then you should avoid using HibernateTemplate or HibernateDaoSupport classes and better to use DAO pattern with dependency injection for the integration. Also Spring ORM provides support for using Spring declarative transaction management, so you should utilize that rather than going for hibernate boiler-plate code for transaction management."
What is Spring Security?	"Spring security framework focuses on providing both authentication and authorization in java applications. It also takes care of most of the common security vulnerabilities such as CSRF attack. It's very beneficial and easy to use Spring security in web applications, through the use of annotations such as @EnableWebSecurity.
How to inject a java.util.Properties into a Spring Bean?	"We need to define propertyConfigurer bean that will load the properties from the given property file.  Then we can use Spring EL support to inject properties into other bean dependencies. For example; <bean id=""propertyConfigurer"" class=""org.springframework.context.support.PropertySourcesPlaceholderConfigurer""> <property name=""location"" value=""/WEB-INF/application.properties"" /></bean> <bean class=""com.journaldev.spring.EmployeeDaoImpl""> <property name=""maxReadResults"" value=""${results.read.max}""/> </bean> If you are using annotation to configure the spring bean, then you can inject property like below. @Value(""${maxReadResults}"") private int maxReadResults;"
Name some of the design patterns used in Spring Framework?	"Spring Framework is using a lot of design patterns, some of the common ones are: Singleton Pattern: Creating beans with default scope. Factory Pattern: Bean Factory classes Prototype Pattern: Bean scopes Adapter Pattern: Spring Web and Spring MVC Proxy Pattern: Spring Aspect Oriented Programming support Template Method Pattern: JdbcTemplate, HibernateTemplate etc Front Controller: Spring MVC DispatcherServlet Data Access Object: Spring DAO support Dependency Injection and Aspect Oriented Programming"
What are some of the best practices for Spring Framework?	"Some of the best practices for Spring Framework are: Avoid version numbers in schema reference, to make sure we have the latest configs. Divide spring bean configurations based on their concerns such as spring-jdbc.xml, spring-security.xml. For spring beans that are used in multiple contexts in Spring MVC, create them in the root context and initialize with listener. Configure bean dependencies as much as possible, try to avoid autowiring as much as possible. For application level properties, best approach is to create a property file and read it in the spring bean configuration file. For smaller applications, annotations are useful but for larger applications annotations can become a pain. If we have all the configuration in xml files, maintaining it will be easier. Use correct annotations for components for understanding the purpose easily. For services use @Service and for DAO beans use @Repository. Spring framework has a lot of modules, use what you need. Remove all the extra dependencies that gets usually added when you create projects through Spring Tool Suite templates. If you are using Aspects, make sure to keep the join pint as narrow as possible to avoid advice on unwanted methods. Consider custom annotations that are easier to use and avoid any issues. Use dependency injection when there is actual benefit, just for the sake of loose-coupling don't use it because it's harder to maintain."
What is SPRING?	Spring is a module based, open source, java framework. It provides support for enterprise level applications; it provides infrastructure so you can focus on your application's businless logic.
What features does spring have?	Lightweight, Inversion of Control (IoC), Aspect Oriented Programming (AOP), Model View Controller Design pattern (MVC) and a TON of abstracted apis
What does it mean that Spring is lightweight?	spring is lightweight when it comes to size and transparency. The basic version of spring framework is around 1MB. And the processing overhead is also very negligible.
What IS Inversion of Control (IoC)?	It is giving up control of some process to another entity
Name the modules of Spring.	Spring Core, Web-MVC, ORM, AOP, Test, Security
What is dependency injection?	A process whereby objects define their dependencies (that is, the other objects they work with) only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method.
What is a dependency?	A dependency is a service class that can be utilized by another class(es); these other classes can be referred to as client classes.
How can you manage dependency injection?	Through annotations, like @Autowired, as opposed to instantiating them directly (the imperative way)
What are Spring annotations?	Spring Annotations allow you to configure the dependency injection by moving bean configuration into the component class itself by using annotations on the relevant class, method, or field declaration. Annotations can replace the need to use XML to describe a bean wiring.
What annotations are used to register a class as a spring bean?	<context:component-scan> in the beans.xml tells the container to look for classes that are annotated with @Component, @Controller, @Repository, @Service, @RestController and more
What are three ways Spring lets you declare dependencies using annotations?	field injection, setter injection, and constructor injection
What are Cross Cutting Concerns (CCCs)?	A CCC is meta logic that an application needs, that is independent of business logic. In other words, logic that EVERY application needs before you even consider what your specific application even does.
What are some examples of CCCs in a web application?	transactions, caching, exception, logging, security (route guarding, etc)
What is Aspect Oriented Programming (AOP)?	it's the process of modularizing your cross cutting concerns
What is an Aspect?	It's a modularized CCCs. It's similar to middleware in a webapplication. In Java, it takes the form of a class.
What are Advice?	An action taken by an aspect at a particular point in the execution of the application (join point). An Advice takes the form of a method,.
What is a join point AOP?	A point during the execution of a program, such as the execution of a method or the handling of an exception. AOP, a join point ALWAYS represents a method execution.
What is a Pointcut in regard to Spring AOP?	A Pointcut is a set of one or more join points where an advice should be executed. They can be specified by using an expression or patterns. You specificy a point cut as a parameter to an advice annotation.
What is the difference between joinpoint and pointcut?	A joinpoint is a selectable point in the execution of an application. A pointcut is an expression targetting one or more join points.
What is AspectJ?	AspectJ refers to a style of declaring aspects using annotated classes. Spring AOP implements a simple type of AspectJ.
What are some COMMON Spring Exceptions?	BeanCreationException, NoUniqueBeanDefinitionException, UnsatisfiedDependencyException, NoSuchBeanDefinitionException, XmlBeanDefinitionException
What is a Spring bean?	A bean,, is an object that is instantiated, assembled and otherwise managed by a Spring IoC container. They have been created with the configuration metadata that you supply to the container. In short, it's a class that you've asked Spring to manage for you.
What are the two distinct types of containers that Spring provides?	BeanFactory and ApplicationContext
What is the BeanFactory?	The simplest container providing basic support for DI. BeanFactory is no longer the preferred container to use.
What are the five scopes of a Spring Bean?	Singleton, Prototype, Request, Session and Global-Session
What is the ApplicationContext?	It extends BeanFactory and adds more enterprise-specific functionality such as text messaging.
What is the Bean Configuration File, and what is the file typically named?	The Bean Configuration File is an XML file created with the configuration metadata that you supply to the container. It contains the definitions of the beans and how beans are associated with one another. It is typically named Beans.xml.
What is the root tag of the Beans.xml file?	The root tag is <beans>.
How would you go about adding a bean?	Within the beans tag, we define each bean using a new <bean> tag. We can specify the id and class name used to create the bean.
What line of code starts Spring's IoC container?	public static ApplicationContext appContext= new ClassPathXmlApplicationContext("applicationContext.xml");
How do you write the xml script that turns on Spring ORM annotations?	<tx:annotation-driven/>
What is Spring ORM?	Spring ORM is a spring module that allows Spring to manage another ORM framework in your place. In our case, we let Spring ORM manage Hibernate.
What three beans do you need to create in your beans.xml to set up Hibernate with Spring ORM.	You need your "dataSource", "sessionFactory", and "TransactionManager".
What is Datasource ORM's applicationContext.xml?	Datasource is an object that holds all the attributes necessary to connect to your database
What is Session factory ORM's applicationContext.xml?	Session factory is an object that is responsible for creating Hibernate sessions
What is transaction manager ORM's applicationContext.xml?	A bean that is responsible for managing your transactions (big surprise) AND also manages our contextual sessions
What are contextual sessions (hibernate sessions)?	Sessions with information SPECIFIC to each user. They make it so that each user ONLY SEES THEIR INFORMATION, not someone else's.
What do you need to do in order to configure the dispatcher servlet manually for Spring MVC.	Inside of the web.xml file that is inside of the WEB-INF folder, you need to define the servlet. It should have a name, class and load-on-startup set to a non-zero value. You must then define the servlet mapping using the name of the servlet you defined and the url pattern of requests that the DispacherServlet should handle.
How do you turn ON annotation support MVC?	Use <mvc:annotation-driven /> in beans.xml to switch ON annotation support. (form validation, message conversion, and field formatting) Add the <context:component-scan> tag to tell Spring where to scan. This will allow you to make use of annotations such as @Controller, @RequestMapping, etc.
How does Tomcat use the web.xml file?	It is used by tomcat to deploy your application
What does the @RequestMapping annotation do?	The @RequestMapping annotation tells the HandlerMapping the controller method to go to based on the URI of the HTTP request passed to it by the DispatcherServlet.
What does the DispatcherServlet do?	Upon initialization of a DispatcherServlet, the framework looks for a file named [servlet-name]-servlet.xml in the WEB-INF directory of your web application and creates the beans defined there, overriding the definitions of any beans defined with the same name in the global scope.
How do you tell Spring that a class is a controller.	Use the @Controller annotation over the class that you want Spring to manage as a controller. Inside of a controller, using the @RequestMapping above a method identifies the method as a request handler type for a given path.
What is the @RestController?	The @RestController annotation flags a class ready for use by Spring MVC to handle web requests. It is a combination of the @Controller and @ResponseBody annotations.
What are some other annotations that can be used inside of a controller?	@GetMapping, @PostMapping, @ResponseBody, @RequestBody, @RequestParam, @PathVariable, @CrossOrigin
What are some special beans in the WebApplicationContext?	controllers, handler mappings, view resolvers, handler exception resolvers
What is WebApplicationContext?	WebApplicationContext is the child of plain ApplicationContext. It is used in web applications. It provides features to deal with web-related components like- controllers, view resolvers etc.
What are some useful objects that SpringMVC can inject into your objects, assuming you declare a parameter for them?	HttpSession, HttpServletRequest, HttpServletResponse, ModelAndView
What is Spring Boot?	An opinionated view of the Spring platforms and third-party libraries that allows you to start programming with minimal setup.
What does adding the 'spring-boot-starter-parent' to you POM do for you?	It allows you to inherit a starter project that has already made decisions about things like what ORM, Object Mapper, and logging to use.
What are some of the advantages of using Spring Boot over the basic Spring core?	Directly embed a Tomcat server (no need to deploy WAR files) Simplifies your Maven configuration by providing an opinionated starter POM No code generation and no requirement for XML configuration
What is the @SpringBootApplication?	The @SpringBootApplication annotation is a convenience annotation that is a combination of the following annotations:  @Configuration, @EnableAutoConfiguration, @ComponentScan
Is it possible to add any configuration to Spring Boot?	Yes. We can use a file called "application.properties" to add configurations to Spring Boot if we need. This file is location in our resources folder (or Web-INF, depending)
What type of information do we commonly add to the application.properties file?	Properties we could add to this file include the port number of the server and database connection properties.
What is Spring Data?	Spring Data is a Spring-based programming model for data access
What are some advantages of using Spring Data?	Spring Data creates all your dao method implementations for you. All you have to do is create an interface then extend CrudRepository<MyObject, Integer>. Spring Data will automatically create your basic crud methods.
What module of Spring Data have we used to have our repository implementation automatically provided for us through our repository interfaces.	We have used the spring-data-jpa module is used to implement JPA-based repositories.
Spring Boot Components	Spring Boot Starter Spring Boot AutoConfigurator Spring Boot Actuator Spring Boot CLI Spring Boot Initilizr
What is Spring Boot Starter?	Spring Boot Starters are just JAR Files. They are used by Spring Boot Framework to provide "Auto-Dependency Resolution". Starters are a set of convenient dependency descriptors that you can include in your application. You get a one-stop-shop for all the Spring and related technology that you need, without having to hunt through sample code and copy paste loads of dependency descriptors.
What are the other Starter Project Options that Spring Boot provides?	Spring Boot also provides other starter projects including the typical dependencies to develop specific type of applications spring-boot-starter-web-services - SOAP Web Services spring-boot-starter-web - Web & RESTful applications spring-boot-starter-test - Unit testing and Integration Testing spring-boot-starter-jdbc - Traditional JDBC spring-boot-starter-hateoas - Add HATEOAS features to your services spring-boot-starter-security - Authentication and Authorization using Spring Security spring-boot-starter-data-jpa - Spring Data JPA with Hibernate spring-boot-starter-data-rest - Expose Simple REST Services using Spring Data REST
What is the easiest approach to create a Spring Boot Project?	Spring Initializr http://start.spring.io/ is great tool to bootstrap your Spring Boot projects. As shown in the image above, following steps have to be done  Launch Spring Initializr and choose the following Choose com.in28minutes.springboot as Group Choose student-services as Artifact Choose following dependencies WebActuatorDevTools Click Generate Project.Import the project into Eclipse. File -> Import -> Existing Maven Project.
Is Spring Initializr the only way to create Spring Boot Projects?	No.Spring Initializr makes it easy to create Spring Boot Projects. But you can setup a maven project and add the right dependencies to start off.In our Spring course, we use 2 approaches to create projects.The first one is start.spring.io.The other one - setting up a project manually is used in the Section titled - "Basic Web Application"Setting up a maven project manuallyHere are the important steps:In Eclipse, Use File -> New Maven Project to create a new project.Add dependencies.Add the maven plugins!Add the Spring Boot Application classYou are ready to go!""
What is Spring Boot AutoConfigurator?	Spring Boot AutoConfigurator is used by Spring Boot Framework to provide "Auto-Configuration". Spring Boot looks at   a) Frameworks available on the CLASSPATH   b) Existing configuration for the application. Based on these, Spring Boot provides basic configuration needed to configure the application with these frameworks.   This is called Auto Configuration.
What is Spring Boot Actuator?	Spring Boot Actuator is used by Spring Boot Framework to provide "Management EndPoints" to see Application Internals, Metrics etc."
What is Spring Boot CLI?	In simple words, Spring Boot CLI is Auto Dependency Resolution, Auto-Configuration, Management EndPoints, Embedded HTTP Servers(Jetty, Tomcat etc.) and (Groovy, Auto-Imports)In other words, Spring Boot CLI is Spring Boot Starter, Spring Boot Auto-Configurator, Spring Boot Actuator, Embedded HTTP Servers, and Groovy.With Spring Boot CLI:No SemicolonsNo Public and private access modifiersNo Imports(Most)No "return" statementNo setters and gettersNo Application class with main() method(It takes care by SpringApplication class).No Gradle/Maven builds.No separate HTTP Servers.""
What is Spring Boot Initilizr?	Spring Boot Initilizr is a Spring Boot tool to bootstrap Spring Boot or Spring Applications very easily. Spring Boot Initilizr comes in the following forms:  Spring Boot Initilizr With Web Interface Spring Boot Initilizr With IDEs/IDE Plugins Spring Boot Initilizr With Spring Boot CLI Spring Boot Initilizr With ThirdParty Tools""
Why we need Spring Boot Initilizr?	Spring Boot Initilizr simplifies Spring Applications Development by providing initial project structure and build scripts.It reduces Development timeIt increases Productivity"
Spring Boot With Maven/Gradle?	Spring Boot Framework uses one of the greatest features of Maven/Gradle build tools: "Transitively Dependency Resolution Management"."
What is "Transitively Dependency Resolution Management"?	"Transitively Dependency Resolution Management" means: If we define an "A" dependency in build scripts, "A" is dependent on "B" and "B" is dependent on "C", That means "A" is also dependent on "C".Then Build Tools will download and add all Three Jar files "A", "B" and "C" to our application classpath."
	<GO TO FIGURE>"
Spring Boot vs Spring MVC vs Spring - How do they compare?	Spring MVCSpring MVC Framework provides decoupled way of developing web applications. With simple concepts like Dispatcher Servlet, ModelAndView and View Resolver, it makes it easy to develop web applications.  Spring Boot The problem with Spring and Spring MVC is the amount of configuration that is needed.  <bean class=""org.springframework.web.servlet.view.InternalResourceViewResolver"">  <property name=""prefix""> <value>/WEB-INF/views/</value> </property>  <property name=""suffix""> <value>.jsp</value> </property> </bean>  <mvc:resources mapping=""/webjars/**"" location=""/webjars/""/>  Spring Boot solves this problem through a combination of Auto Configuration and Starter Projects. Spring Boot also provide a few non functional features to make building production ready applications faster.
Why do we need spring-boot-maven-plugin?	spring-boot-maven-plugin provides a few commands which enable you to package the code as a jar or run the applications.  spring-boot:run runs your Spring Boot application. spring-boot:repackage repackages your jar/war to be executable. spring-boot:start and spring-boot:stop to manage the lifecycle of your Spring Boot application (i.e. for integration tests). spring-boot:build-info generates build information that can be used by the Actuator.
How can I enable auto reload of my application with Spring Boot?	Use Spring Boot Developer Tools. Adding Spring Boot Developer Tools to your project is very simple. Add this dependency to your Spring Boot Project pom.xml  <dependency>  <groupId>org.springframework.boot</groupId>  <artifactId>spring-boot-devtools</artifactId>  <scope>runtime</scope> </dependency>  Restart the application.You are all Set.If you would want to auto load the page as well, you can look at LiveReloadhttp://www.logicbig.com/tutorials/spring-framework/spring-boot/boot-live-reload/.In my trials, we found LiveReload buggy. Do let us know if you have a better experience with it.""
What and Why Embedded Servers?	Think about what you would need to be able to deploy your application (typically) on a virtual machine. Step 1 : Install Java Step 2 : Install the Web/Application Server (Tomcat/Websphere/Weblogic etc) Step 3 : Deploy the application war What if we want to simplify this? How about making the server a part of the application? You would just need a virtual machine with Java installed and you would be able to directly deploy the application on the virtual machine. Isn't it cool? This idea is the genesis for Embedded Servers. When we create an application deployable, we would embed the server (for example, tomcat) inside the deployable. For example, for a Spring Boot Application, you can generate an application jar which contains Embedded Tomcat. You can run a web application as a normal Java application!Embedded server is when our deployable unit contains the binaries for the server (example, tomcat.jar).
How to generate a WAR file with Spring Boot?	Recommended Reading  https://spring.io/guides/gs/convert-jar-to-war/  Here's the direct link to spring documentation  https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-maven-packaging
What does Spring Boot do when starting?	- Sets up default configuration - Starts Spring application context - Performs class path scan - Starts Tomcat server
What does @SpringBootApplication as a convenient annotation implicitly adds ?	@Configuration: Tags the class as a source of bean definitions for the application context.  @EnableAutoConfiguration: Tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings. For example, if spring-webmvc is on the classpath, this annotation flags the application as a web application and activates key behaviors, such as setting up a DispatcherServlet.  @ComponentScan: Tells Spring to look for other components, configurations, and services
What is the purpose of implementing the CommandLineRunner interface?	[TODO - add answer]
What does the @EnableCaching is used for?	annotation triggers a post-processor that inspects every Spring bean for the presence of caching annotations on public methods. If such an annotation is found, a proxy is automatically created to intercept the method call and handle the caching behavior accordingly.  The post-processor handles the @Cacheable, @CachePut and @CacheEvict annotations
What does the @Cacheable annotation is used for?	[TODO - add answer]
What is IOC?	Inversion of Control is a design pattern largely achieved through dependency injection where the burden of creating objects is shifted from the application code to the spring container
What is dependency injection?	Dependency injection is a specific implementation of inversion of control (IOC).
What are the different types of dependency injection and which does Spring support?	Constructor Injection (e.g. Pico container, Spring etc): Dependencies are provided as constructor parameters.  Setter Injection (e.g. Spring): Dependencies are assigned through JavaBeans properties (ex: setter methods).  Interface Injection (e.g. Avalon): Injection is done through an interface.
What are the benefits of IOC?	Minimizes the amount of code in your application. With IOC containers you do not care about how services are created and how you get references to the ones you need. You can also easily add additional services by adding a new constructor or a setter method with little or no extra configuration. Make your application more testable by not requiring any singletons or JNDI lookup mechanisms in your unit test cases. IOC containers make unit testing and switching implementations very easy by manually allowing you to inject your own objects into the object under test. Loose coupling is promoted with minimal effort and least intrusive mechanism. The factory design pattern is more intrusive because components or services need to be requested explicitly whereas in IOC the dependency is injected into requesting piece of code. Also some containers promote the design to interfaces not to implementations design concept by encouraging managed objects to implement a well-defined service interface of your own. IOC containers support eager instantiation and lazy loading of services. Containers also provide support for instantiation of managed objects, cyclical dependencies, life cycles management, and dependency resolution between managed objects etc.
What is Spring?	Spring is a Dependency Injection Framework.Spring is an open source framework created to address the complexity of enterprise application development of persisting data.Advantage: The Spring framework has a layered architecture, which allows you to be selective about which of its components you use.
What are some features of Spring?	Lightweight: spring is lightweight when it comes to size and transparency. The basic version of spring framework is around 1MB. And the processing overhead is also very negligible. Inversion of control (IOC): Loose coupling is achieved using the technique Inversion of Control. The objects give their dependencies instead of creating or looking for dependent objects.  Aspect oriented (AOP): Spring supports Aspect oriented programming and enables cohesive development by separating application business logic from system services.  Container: Spring contains and manages the life cycle and configuration of application objects.  MVC Framework: Spring comes with MVC web application framework, built on core Spring functionality. This framework is highly configurable via strategy interfaces, and accommodates multiple view technologies like JSP, Velocity, Tiles, iText, and POI. But other frameworks can be easily used instead of Spring MVC Framework. Transaction Management: Spring framework provides a generic abstraction layer for transaction management. This allowing the developer to add the pluggable transaction managers, and making it easy to demarcate transactions without dealing with low-level issues. Spring's transaction support is not tied to J2EE environments and it can be also used in container less environments. JDBC Exception Handling: The JDBC abstraction layer of the Spring offers a meaningful exception hierarchy, which simplifies the error handling strategy. Integration with Hibernate, JDO, and iBATIS: Spring provides best Integration services with Hibernate, JDO and iBATIS
Name the modules of Spring.	The basic Spring Framework contains the following libraries grouped by functionality.  1) Core Container org.springframework.core org.springframework.beans org.springframework.expression org.springframework.context org.springframework.context.support  2) Test org.springframework.test  3) AOP org.springframework.aop org.springframework.aspects  4) Instrumentation org.springframework.instrument org.springframework.instrument.tomcat  5) Web and Remoting org.springframework.web org.springframework.web.portlet org.springframework.web.servlet org.springframework.web.struts  6) Data Access and Integration org.springframework.jdbc org.springframework.jms org.springframework.orm org.springframework.oxm org.springframework.transaction
What is a Bean Factory?	A BeanFactory is like a factory class that contains a collection of beans. The BeanFactory holds Bean Definitions of multiple beans within itself and then instantiates the bean whenever asked for by clients.BeanFactory is able to create associations between collaborating objects as they are instantiated. This removes the burden of configuration from the bean itself and the beans client. BeanFactory also takes part in the life cycle of a bean, making calls to custom initialization and destruction methods.
What is Application Context?	An application context loads bean definitions, wire beans together, and dispense beans upon request. But it also provides: A means for resolving text messages, including support for internationalization. A generic way to load file resources. Events to beans that are registered as listeners.
What is the difference between BeanFactory and ApplicationContext ?	ApplicationContext preinstantiates the beans (Singletons) while BeanFactory does lazy initialization.  ApplicationContext provides a means for resolving text messages including support for I18N. ApplicationContext provide a generic way to load file resources such as images.  ApplicationContext can publish events to beans that are registered as listeners.  Certain operations on the container or beans in the container, which have to be handled in a programmatic fashion with a bean factory, can be handled declaratively in an application context.  ResourceLoader support: Spring's Resource interface is a flexible generic abstraction for handling low-level resources. An ApplicationContext itself is a ResourceLoader, Hence provides an application with access to deployment-specific Resource instances.  MessageSource support: The ApplicationContext implements MessageSource, an interface used to obtain localized messages, with the actual implementation being pluggable.
What are the common implementations of the Application Context?	ClassPathXmlApplicationContext : It loads context definition from an XML file located in the classpath, treating context definitions as classpath resources. The application context is loaded from the application's classpath by using:ApplicationContext context = new ClassPathXmlApplicationContext("bean.xml");  FileSystemXmlApplicationContext : It loads a context definition from an XML file in the file system. The application context is loaded from the file system by using: ApplicationContext context = new FileSystemXmlApplicationContext("bean.xml");  XmlWebApplicationContext : It loads context definition from an XML file contained within a web application.
What is the typical Bean life cycle Bean Factory Container?	The spring container finds the bean's definition from the XML file and instantiates the bean.  Using the dependency injection, spring populates all of the properties as specified in the bean definition  If the bean implements the BeanNameAware interface, the factory calls setBeanName() passing the bean's ID.  If the bean implements the BeanFactoryAware interface, the factory calls setBeanFactory(), passing an instance of itself.  If there are any BeanPostProcessors associated with the bean, their post- ProcessBeforeInitialization() methods will be called.  If an init-method is specified for the bean, it will be called. Finally, if there are any BeanPostProcessors associated with the bean, their postProcessAfterInitialization() methods will be called.
Explain bean wiring	The act of creating associations between application components (beans) within the Spring container is referred to as Bean wiring.
Explain autowiring	The Spring container is able to autowire relationships between collaborating beans. This means that it is possible to automatically let Spring resolve collaborators (other beans) for your bean by inspecting the contents of the BeanFactory. The autowiring functionality has four modes:byName byType constructor autodetect
Name the design pattern used in the Spring MVC architecture and the control element	The design pattern followed by all MVC frameworks including Struts, JSF, and Spring is the Front Controller pattern. The central control element MVC is the Dispatcher Servlet.
What does DefaultAnnotationHandlerMapping do MVC?	It is used by DispatcherServlet to map requests to specific controllers and controller methods annotated with @RequestMapping.This is one of five handler mapping classes available.
What does the ViewResolver do MVC?	The ViewResolver exchanges a logical view name supplied by the controller for an actual view (JSP) that renders the result.The last task to be perfomed in HTTP request handling is rendering output to the user.
How do you turn ON annotation support MVC?	Use <mvc:annotation-driven /> in mvc-dispatcher-servlet.xml to switch ON annotation support, form validation, message conversion, and field formatting.
List the annotations used to configure a basic controller class MVC.	@Controller This registers the class as a controller and must be used in conjunction with <context: component-scan /> tag in the XML to automatically discover and register the controllers as Spring beans.  @RequestMapping This identifies the method as a request handler type for a given path.
How do you turn ON annotation-based autowiring?	To turn ON autowiring use the <context:annotation-config/> tag in the spring xml. This will enble @Autowired, @Inject (JSR-330), and @Resource (JSR-250).
How does the @Autowired annotation work?	It is used to automatically wire values into properties, methods, and constructors. It works similar to xml-based autowiring but can be selectively used. Bean properties can be annotated directly, allowing removal of the setters in the class and the <property> tags in the spring xml. If no bean is found to wire to the annotated property a NoSuchBeanDefinitionException is thrown by default.
What annotations are used to register a class as a spring bean?	By default, <context:component-scan> in the spring.xml tells the container to look for classes that are annotated with one of the following:  @Component The class defines a Spring component. @Controller The class defines a Spring MVC controller. @Repository The class defines a data repository such as a DAO implementation class. @Service The class defines a service.
How do you integrate Struts with Spring?	Using ContextLoaderPlugIn: Install the ContextLoaderPlugin in struts-config.xml In the "type" attribute of the action tag use: org.springframework.web.struts.DelegatingActionProxy.  In action-servlet.xml map the HTML action to the action class and reference the injected bean. In appContext.xml map the injected bean to a bean class. In the action class install a setter for the injected bean.
What ORMs does Spring support?	Spring supports the following ORMs :  Hibernate iBatis JPA (Java Persistence API) TopLink JDO (Java Data Objects) OJB
What are the ways to access Hibernate using Spring?	There are several ways to achieve this; however, the two popular approaches to Spring's Hibernate integration are: Hibernate Contextual Sessions (newer) HibernateTemplate (older)
How do you integrate Spring and Hibernate using Contextual Sessions?	There are two popular approaches to this declarative, POJO-based integration:  1) XML approach: Create the DaoImpl class with a setter for the Session Factory. Wire up the following beans: DataSource, SessionFactory, HibernateTransactionManager, and DaoImpl class.  Bind each CRUD method to a transaction in the appContext.xml. Define the AOP configuarion using the <aop:config> tags and the transaction advice using the <tx:advice> tags and the transaction properties (propagation, isolation, and rollback) for each method with the <tx:method> tags.    2) Annotation approach: Create the annotated (@Repository) DaoImpl class with an annotated (@Inject) sessionFactory. Wire up the following beans: DataSource, SessionFactory, and HibernateTransactionManager in the appContext.xml  Use <context:component-scan> to find the annotated classes. Include a PersistenceExceptionTranslationPostProcessor bean definition to convert platform specific exceptions to a richer set of Spring runtime data access exceptions.  Bind and annotate (@Transactional) each CRUD method to a transaction in the DaoImpl class and use the <tx:annotation-driven> tag in appContext.xml.
Define HibernateTemplate	org.springframework.orm.hibernate.HibernateTemplate is a helper class which provides different methods for querying/retrieving data from the database. It also converts checked HibernateExceptions into unchecked DataAccessExceptions.
What benefits does the HibernateTemplate provide?	HibernateTemplate, a Spring Template class simplifies interactions with Hibernate Session. Common functions are simplified to single method calls. Sessions are automatically closed. Exceptions are automatically caught and converted to runtime exceptions.
How did you integrate Spring and Hibernate using Template Injection?	Follow this three-step process: Wire up the following beans in the spring.xml: DataSource, SessionFactory, HibernateTransactionManager, and DaoImpl class. Place a setter for the HibernateTemplate in the DaoImpl class and Create an anonymous inner class to implement the doInHibernate method of the Callback interface and place the desired Template CRUD method there. Pass the inner class object to the Template execute method to invoke the desired CRUD operation.
What are Bean scopes Framework?	singleton Scopes a single bean definition to a single object instance per Spring IoC container.  prototype Scopes a single bean definition to any number of object instances.  request Scopes a single bean definition to the lifecycle of a single HTTP request session Scopes a single bean definition to the lifecycle of a HTTP Session. global session Scopes a single bean definition to the lifecycle of a global HTTP Session.
What is AOP?	Aspect-oriented programming is a programming technique that allows programmers to modularize crosscutting concerns. The core construct of AOP is the aspect, which encapsulates behaviors affecting multiple classes into reusable modules.
How is AOP used?	AOP is used in the Spring Framework to provide declarative enterprise services.
Explain an Aspect	An Aspect is a modularization of a concern that cuts across multiple objects. Transaction management is a good example of a crosscutting concern in J2EE applications. AOP, aspects are implemented using regular classes (the schema-based approach) or regular classes annotated with the @Aspect annotation (@AspectJ style).
Explain a join point	A join point is a point during the execution of a program, such as the execution of a method or the handling of an exception. AOP, a join point always represents a method execution.
Explain an Advice	Action taken by an aspect at a particular join point. Different types of advice include "around," "before" and "after" advice. Many AOP frameworks, including Spring, model an advice as an interceptor, maintaining a chain of interceptors "around" the join point.
What are the types of Advice?	Types of advice: Introduction : Introduction advice cannot be used with any pointcut, as it applies only at class, rather than method, level. You can only use introduction advice with the IntroductionAdvisor.  Before advice: Advice that executes before a join point, but which does not have the ability to prevent execution flow proceeding to the join point (unless it throws an exception).  After returning advice: Advice to be executed after a join point completes normally: for example, if a method returns without throwing an exception.  After throwing advice: Advice to be executed if a method exits by throwing an exception. After (finally) advice: Advice to be executed regardless of the means by which a join point exits (normal or exceptional return).  Around advice: Advice that surrounds a join point such as a method invocation. This is the most powerful kind of advice. Around advice can perform custom behavior before and after the method invocation. It is also responsible for choosing whether to proceed to the join point or to shortcut the advised method execution by returning its own return value or throwing an exception
What are the types of the transaction management Spring supports?	Spring Framework supports:  Programmatic transaction management. Declarative transaction management.
What are the benefits of the Spring Framework transaction management?	The Spring Framework provides a consistent abstraction for transaction management that delivers the following benefits:  Provides a consistent programming model across different transaction APIs such as JTA, JDBC, Hibernate, JPA, and JDO.  Supports declarative transaction management.  Provides a simpler API for programmatic transaction management than a number of complex transaction APIs such as JTA.  Integrates very well with Spring's various data access abstractions.
When do you use programmatic and declarative transaction management?	Programmatic transaction management is used if you have a small number of transactional operations. Declarative transaction management is used if your application has numerous transactional operations. It keeps transaction management out of business logic, and is not difficult to configure.
What is Spring's jdbc template?	Jdbc Template provides many convenience methods for doing things such as converting database data into primitives or objects, executing prepared and callable statements, and providing custom database error handling. Example:JdbcTemplate template = new JdbcTemplate(myDataSource);
What is an Advice	An Advice is action taken by an aspect at a particular join point.
What is a Pointcut	A Pointcut is a predicate that matches join points.
What is a Cross cutting concern	Cross cutting concerns are parts of a program that rely on or must affect many other parts of the system.
After returning advice executes after a join point completes normally.	advice executes after a join point completes normally.For example, if a method returns without throwing an exception.
Singleton	ApplicationContext will pre-instantiate beans with the Singleton bean scope.
How do you turn ON annotation support MVC?	mvc annotation-driven
How do you turn ON annotation-based autowiring?	context annotation-config
Select the core component of the Spring MVC module.	DispatcherServlet
Select the correct stereotype annotation	@Component@Repository@Service@Controller
Select the following correct statement regarding Spring.	Spring Does not encourage tight coupling.
Select the incorrect annotation from the list.	@Dao
Data Source	Select the incorrect module of Spring
Controller	it takes the request and calls the appropriate service methods based on used GET or POST method.
ViewResolver	The DispatcherServlet will take help from it to pickup the defined view for the request
HandlerMapping	The Spring MVC DispatcherServlet consults the to call the appropriate Controller
DispatcherServlet	The Spring Web MVC framework is designed around a it that handles all the HTTP requests and responses
This annotation identifies the method as a request handler type for a given path.	@RequestMapping
This annotation registers the class as a controller and must be used in conjunction with <context: component-scan /> tag in the XML to automatically discover and register the controllers as Spring beans.	@Controller
What are the different types of Advice?	after, after throwing, after returning, around, before
What are the scopes of a Spring bean?	Singleton, Prototype, Session, Global Session, Request
What do you mean by Advice?	Action taken at a particular join point
What do you mean by Aspect?	A modularization of a concern that cuts across multiple objects
What do you mean by autowiring?	Spring auto-resolves collaborators for your bean by inspecting the contents of the BeanFactory
What do you mean by bean wiring?	The act of creating associations between beans within the Spring container
What do you mean by join point?	A point during the execution of a program, such as the execution of a method or the handling of an exception
What is AOP?	The modularization of cross cutting concerns.
What is Application Context?	A BeanFactory with more features, such as text messaging, generic resource loaders, and bean event listeners
What is Bean Factory?	Holds Bean Definitions of multiple beans within itself and then instantiates the bean when requested
What is dependency injection?	A design pattern that passes concrete instances during object creation or initialization
What is JSR-303?	A standard provided by Spring and other frameworks utilized for bean validation.
What is ProceedingJoinPoint?	Exposes the proceed(..) method in order to support around advice in @AspectJ aspects
What is Spring AOP?	A Spring module that can provide declarative enterprise servicesA programming technique that allows programmers to modularize crosscutting concernsA technique to modularize behavior that cuts across the typical divisions of responsibility
What is Spring MVC?	A fully featured MVC framework that is a module of Spring.
What is the current core container?	ApplicationContext
What is the typical Bean life cycle Bean Factory Container?	Instantiate,populate properties,setBeanName,setBeanFactory,pre-init PreProcessor,afterPropertiesSet,custom init,post-init PostProcessor,in use,destroy,custom destroy
Which is not a bean scope Framework?	Factory
Which is not a component of Spring MVC?	RequestProcessor
Which is not one of the common implementations of the Application Context?	WebXmlApplicationContextIts XmlWebApplicationContext
Why should we use DI (Dependency Injection) over conventional development techniques? Select all that apply.	It provides for loose coupling.It allows the container to manage our dependencies.It allows the developer to utilize Spring's autowiring capabilities.
What is SPRING	Spring is a framework created to address the complexity of enterprise level application development.Spring includes an inversion of control container.Spring has a layered architecture which allows a user to be selective about which components they use.
What is Dependency Injection?	Dependency Injection is an implementation of inversion of control.DI is a process where a container supplies the dependencies of an object.A dependency is an object that can be used.An injection is the passing of a dependency to a dependent object.
what is Inversion of Control	Inversion of Control is a design principle where a Spring Container receives the flow of control from the normal control of a java dependency
what is the Spring Bean Life Cycle	The spring container finds the bean's definition from the XML file and instantiates the bean.Using the dependency injection, spring populates all of the properties as specified in the bean definitionIf the bean implements the BeanNameAware interface, the factory calls setBeanName() passing the bean's ID.If the bean implements the BeanFactoryAware interface, the factory calls setBeanFactory(), passing an instance of itself.If there are any BeanPostProcessors associated with the bean, their post- ProcessBeforeInitialization() methods will be called.If an init-method is specified for the bean, it will be called.Finally, if there are any BeanPostProcessors associated with the bean, their postProcessAfterInitialization() methods will be called.
what is the purpose of Aware Interface	
Factory VS Application Context	ApplicationContext preinstantiates the beans (Singletons) while BeanFactory does lazy initialization.ApplicationContext provides a means for resolving text messages including support for I18N.ApplicationContext provide a generic way to load file resources such as images.ApplicationContext can publish events to beans that are registered as listeners.Certain operations on the container or beans in the container, which have to be handled in a programmatic fashion with a bean factory, can be handled declaratively in an application context.ResourceLoader support: Spring's Resource interface is a flexible generic abstraction for handling low-level resources. An ApplicationContext itself is a ResourceLoader, Hence provides an application with access to deployment-specific Resource instances.MessageSource support: The ApplicationContext implements MessageSource, an interface used to obtain localized messages, with the actual implementation being pluggable.
what is autowiring?	The Spring framework is able to autowire the relationship of beans. Spring wires collaborating beans by inspecting the BeanFactory.Autowiring has four modes:byName.byType.Constructor.autodetect..
what are the scopes of beans?	Singleton: a single bean definition to a single object instance.Prototype: a single bean definition to multiple object instances.Request: a single bean definition to the life of a single HTTP request.Session: a single bean definition to the life of an HTTP session.GlobalSession: a single bean definition to the life of a global HTTP session.
what are the risks of autowiring by type	
what are the different components of Spring	TestCore ContainerAOPWebData Access and Integration
how do you get the application context	ClasspathXmlApplicationContext: loads context definition from an xml file located in the classpath of the application.FilesystemXmlApplicationContext: loads context definition from an xml file located in the filesystem of the computer.XmlWebApplicationContext: loads context definition from an xml file located in a war.
what are the types of dependency injection	three ways an object can receive a dependency:constructor injection.setter injection.Interface injection.Spring supports constructor and setter injection.
how do you set up a constructor Dependency Injection	Constructor injection method requires the client to provide a parameter in a constructor for the dependency.// ConstructorClient(Service service) {// Save the reference to the passed-in service inside this clientthis.service = service;}
explain AOP	Aspect Orientated Programming is a technique that allows programmers to modularize cross cutting concerns. The core construct of AOP is the Aspect, which is the encapsulation of a cross cutting concern.
what is a cross cutting concern	A cross cutting concern is code that cannot be cleanly decomposed from the business logic.Example: transaction management takes a lot of set up boilerplate code which clutters the business logic.
after finally vs after returning	After finally advice executes no matter how a join point exits.After returning advice executes if a join point exits normally.
what is a join point	A join point is a point of execution when the aspect should be executed.A set of join points is called a point cut.
what is spring mvc	Spring Model View Controller is designed around the front controller pattern where a central servlet provides a method for request processing. The actual work is performed by delegate components.The central servlet is the DispatcherServlet.
explain the flow of mvc	Step 1: First request will be received by DispatcherServletStep 2: DispatcherServlet will take the help of HandlerMapping and get to know the Controller class name associated with the given requestStep 3: So request transfer to the Controller, and then controller will process the request by executing appropriate methods and returns ModeAndView object (contains Model data and View name) back to the DispatcherServletStep 4: Now DispatcherServlet send the model object to the ViewResolver to get the actual view pageStep 5: Finally DispatcherServlet will pass the Model object to the View page to display the result
how does the dispatcher servlet know which controllers to go to	The Dispatcher Servlet will take the help of Handler Mapping and get to know the controller class name associated with the given request.
explain what a model and what a view is	
what are contextual sessions?	A given session is in effect throughout the scope of a given context.
JNDI	java naming and Directory Interfacea standardhow to hide environment variable
Spring Data	simple CRUD, not too customizable
Spring Data REST	simple CRUD, and root apiSpring Data REST builds on top of Spring Data repositories, analyzes your application's domain model and exposes hypermedia-driven HTTP resources for aggregates contained in the model.
Spring ORM / Spring JPA	configure data source / transaction management beanusing @Transactional, spring handles transactions when method is calledmanagement of session Factory
validation	jsr-303a standardhas annotations: @notnull, @greaterthanannotate your fieldsit will check if every object will match these validation fields
how to make a dao with spring data	create interface that extends jpaRepository.@Repositorypublic interface CaveDao extends JpaRepository<Cave, Integer> {// since its an interface, we have access to a lot of other methods, such as .findAll}
how to run a spring boot app	@SpringBootApplicationpublic class App {//pull in dao@AutowiredCaveDao caveDao;p.s.v main(String[] args) {SpringApplication.run(App.class, args);}}
how to pass in java when starting spring boot	@Beanpublic CommandLineRunner runner() {return args -> {List<Cave> caves = caveDao.findAll();syso(caves.toString());};}
how to write a custom method	@Repositorypublic interface CaveDao extends JpaRepository<Cave, Integer> {Cave findByName(String name);}@Beanpublic CommandLineRunner runner() {return args -> {List<Cave> caves = caveDao.findAll();Cave myCave = caveDao.findByName("Gloworm Cave");syso(myCave.toString());};}
Explain Spring MVC	Model, View, Controllerrequest talks to dispatcher. dispatcher talks to handler mapping. handler talks to controller. controller passes it back to handler, which passes it back to dispatcher which passes response back to url
Spring MVC interfaces	Controller: comes between Model and View to manage incoming requests and redirect to proper response. It acts as a gate that directs the incoming information. It switches between going into model or view.HandlerAdapter: execution of objects that handle incoming requestsHandlerInterceptor: interception of incoming requests comparable, but not equal to Servlet filters (use is optional and not controlled by DispatcherServlet).HandlerMapping: selecting objects that handle incoming requests (handlers) based on any attribute or condition internal or external to those requestsLocaleResolver: resolving and optionally saving of the locale of an individual userMultipartResolver: facilitate working with file uploads by wrapping incoming requestsView: responsible for returning a response to the client. Some requests may go straight to view without going to the model part; others may go through all three.ViewResolver: selecting a View based on a logical name for the view (use is not strictly required)
Dispatcher Servlet	core of spring mvcruns xml web application ContextSpring Container / front controllerdefine and configure in web xmlcreate a servlet, point it to servlet class and give it params that point to file you want to configure.load on start tag. it should always be running
Handler Mapping	built from spring class RequestMappingHandlerMappingAfter registration, mapper can talk to controllerActs as a router. only place routing should happenscanner setup:<mvc:annotation-driven>
Controllers	has @Controller annotation on class levelhas @RequestMapping on method level- given parameters ("/api/user/"), a user will be mapped to this method if url looks like paramyou can have annotation RequestMapping over class as well@GetMapping("/me") to catch ending of url
View Resolver	server side resolving of static pagesInternalViewResourceResolverworks with almost anything: html, jsp, Freemarker,ThymleafDefine prefixes and suffixesif controller sends "index" append and apprehend "/web-INF/pages" + ".html"
Explain AOP	Aspect Oriented ProgrammingAOP is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns. It does so by adding additional behavior to existing code (an advice) without modifying the code itself, instead separately specifying which code is modified via a "pointcut" specification, such as "log all function calls when the function's name begins with 'set'". This allows behaviors that are not central to the business logic (such as logging) to be added to a program without cluttering the code, core to the functionality.
Explain cross cutting concern	code that is unrelated to the business logic that often cannot be cleanly decomposed from the rest of the system in both the design and implementationAdvantage: eliminates code scattering and dependenciesExample: logging
explain advice	An advice describes a class of functions which modify other functions when the latter are run.It is a certain function, method or procedure that is to be applied at a given join point of a program.
explain joinpoint	The join point is a point of execution in the base code where the advice specified in a corresponding pointcut is applied.A set of join points is called a pointcut.A join point is a specification of when, in the corresponding main program, the aspect code should be executed.
Define concern	A concern is code that does not follow business logic.For example, transaction management that cut across multiple types and objects is a concern.Can be termed as crosscutting concerns.
Explain the benefits of AOP	AOP allow users to implement custom aspects, complementing their use of OOP with AOP.AOP provide declarative enterprise services, especially as a replacement for EJB declarative services, such as declarative transaction management.
Define Introduction, Target object, AOP proxy, and weaving	Introduction: declaring additional methods or fields on behalf of a type. Spring AOP allows you to introduce new interfaces (and a corresponding implementation) to any advised object. For example, you could use an introduction to make a bean implement an IsModified interface, to simplify caching. (An introduction is known as an inter-type declaration in the AspectJ community.)Target object: object being advised by one or more aspects. Also referred to as the advised object. Since Spring AOP is implemented using runtime proxies, this object will always be a proxied object.AOP proxy: an object created by the AOP framework in order to implement the aspect contracts (advise method executions and so on). In the Spring Framework, an AOP proxy will be a JDK dynamic proxy or a CGLIB proxy.Weaving: linking aspects with other application types or objects to create an advised object. This can be done at compile time (using the AspectJ compiler, for example), load time, or at runtime. Spring AOP, like other pure Java AOP frameworks, performs weaving at runtime.
Why Spring	Spring allows us to focus on what is important, the business logic by stripping away boilerplate codesaves us time
How do you create a spring connection?	getEntityManager.get(id);
what is the difference between spring and spring boot	spring- xml based configuration- app creation/execution takes more time- more boiler plate codespring boot- annotation based- app creation/execution quicker- reduced boiler plate
what is the process of autowiring	1. create a bean class, for example ball.java and it has three private properties: color, owner, and type.2. configure bean in xml. within the <bean> tag, specify id and class, id specifies what you want to name it, ex ball1. class specifies full class path, ex com.revature.springprj.ball.3. in driver, main method create a ApplicationContext context = new FileSystemXmlApplicationContext("beans.xml"), use its getBean() method, and give it the parameter id specified in the xml. you dont need to use the new keyword.
what is annotation autowiring and how do you do it	1. you create a bean, ex remote.javaon the setter method for the class, use the annotation @Autowired2. go to Beans.xml and use tags <context:annotation-config/><context:component-scan base-package="com.revature.spring.springproj" />3. in driver, use getBeans() and pass in Remote.class
What is IoC container	a framework that is used to create and inject dependencies automatically
What are the types of IoC containers	BeanFactory (depreciated)- simple container used for DI with signature:XmlBeanFactory factory = new XmlBeanFactory (new ClassPathResource(Beans.xml));ApplicationContext (usually used)- Advanced container used for DI with signature:ApplicationContext context = new FileSystemXmlApplicationContext("beans.xml");
what are they types of autowiring modes	byName- autowire by property name- inject dependency based on the namebyType- autowire by datatype. injected based on datatypeConstructor- autowire by constructor. injected based to a constructor of class
Whats the difference between singleton and prototype scopes	when using singleton scope, you are able to call the .getBean() method on the same bean multiple times and retrieve methods that have been set previously b/c you are getting the same instance of the beanwhen using prototype scope, you must set methods of each new bean
How do you use the annotations:@Component@Autowire@RestController@Controller@RequestMapping	@Component- marks a class that will be registered in context as a bean@Autowire- Spring auto-wire other beans in you class@RestController- mark a class as controller when developing restful webservices@Controller- mark a class as controller MVC@RequestMapping- Map urls to a class or a handler method when developing Rest webservice applications
Explain AOP	Aspect Oriented Programming AOP is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns. It does so by adding additional behavior to existing code (an advice) without modifying the code itself, instead separately specifying which code is modified via a "pointcut" specification, such as "log all function calls when the function's name begins with 'set'". This allows behaviors that are not central to the business logic (such as logging) to be added to a program without cluttering the code, core to the functionality.
Explain cross cutting concern	code that is unrelated to the business logic that often cannot be cleanly decomposed from the rest of the system in both the design and implementation Advantage: eliminates code scattering and dependencies Example: logging
Aspect	Spring Bean (@Component) annotated with @Aspect Pointcut: trigger or scanner for an advice Advice: method to call when pointcut triggers Advice annotations: - @Before - @After - @After-Returning - @After-Throwing - @Around (combo of before and after) these signal when and how a method will run ex: doSomething(){  @Aspect  class Aspect {  @Before(printout...doSomething())  runthisfirst() {}  }
Explain a pointcut	a pointcut is a set of join points. Pointcut allows where exactly to apply advice, this allows separation of concerns and helps in modularizing business logic. Pointcuts are often specified using class names or method names
explain advice	An advice describes a class of functions which modify other functions when the latter are run. It is a certain function, method or procedure that is to be applied at a given join point of a program.
explain joinpoint	The join point is a point of execution in the base code where the advice specified in a corresponding pointcut is applied. A set of join points is called a pointcut.  A join point is a specification of when, in the corresponding main program, the aspect code should be executed.
Define Aspect	a modularization of a concern that cuts across multiple classes. Transaction management is a good example of a crosscutting concern in J2EE applications. AOP, aspects are implemented using regular classes annotated with the @Aspect annotation (the @AspectJ style)
Define concern	A concern is code that does not follow business logic. For example, transaction management that cut across multiple types and objects is a concern. Can be termed as crosscutting concerns.
Define Join Point	In Spring AOP, a join point always represents a method execution. A join point is a specification of when, in the corresponding main program, the aspect code should be executed.
Define Advice	action taken by an aspect at a particular join point. Different types of advice include "around," "before" and "after" advice.  Many AOP frameworks, including Spring, model an advice as an interceptor, maintaining a chain of interceptors around the join point.
Define a Pointcut	A pointcut is a predicate that matches join points. Advice is associated with a pointcut expression and runs at any join point matched by the pointcut. Example: the execution of a method with a certain name.
Explain the benefits of AOP	AOP allow users to implement custom aspects, complementing their use of OOP with AOP. AOP provide declarative enterprise services, especially as a replacement for EJB declarative services, such as declarative transaction management.
Define Introduction, Target object, AOP proxy, and weaving	Introduction: declaring additional methods or fields on behalf of a type. Spring AOP allows you to introduce new interfaces (and a corresponding implementation) to any advised object. For example, you could use an introduction to make a bean implement an IsModified interface, to simplify caching. (An introduction is known as an inter-type declaration in the AspectJ community.)  Target object: object being advised by one or more aspects. Also referred to as the advised object. Since Spring AOP is implemented using runtime proxies, this object will always be a proxied object.  AOP proxy: an object created by the AOP framework in order to implement the aspect contracts (advise method executions and so on). In the Spring Framework, an AOP proxy will be a JDK dynamic proxy or a CGLIB proxy.  Weaving: linking aspects with other application types or objects to create an advised object. This can be done at compile time (using the AspectJ compiler, for example), load time, or at runtime. Spring AOP, like other pure Java AOP frameworks, performs weaving at runtime.
Explain the types of advice	Before advice: Advice that executes before a join point, but which does not have the ability to prevent execution flow proceeding to the join point (unless it throws an exception).   After returning advice: Advice to be executed after a join point completes normally: for example, if a method returns without throwing an exception.   After throwing advice: Advice to be executed if a method exits by throwing an exception.   After (finally) advice: Advice to be executed regardless of the means by which a join point exits (normal or exceptional return).   Around advice: Advice that surrounds a join point such as a method invocation. This is the most powerful kind of advice. Around advice can perform custom behavior before and after the method invocation. It is also responsible for choosing whether to proceed to the join point or to shortcut the advised method execution by returning its own return value or throwing an exception.
What is SPRING	Spring is a framework created to address the complexity of enterprise level application development.  Spring includes an inversion of control container. Spring has a layered architecture which allows a user to be selective about which components they use.
What is Dependency Injection?	Dependency Injection is an implementation of inversion of control. DI is a process where a container supplies the dependencies of an object. A dependency is an object that can be used. An injection is the passing of a dependency to a dependent object.
what is Inversion of Control	Inversion of Control is a design principle where a Spring Container receives the flow of control from the normal control of a java dependency
what is the Spring Bean Life Cycle	The spring container finds the bean's definition from the XML file and instantiates the bean.  Using the dependency injection, spring populates all of the properties as specified in the bean definition  If the bean implements the BeanNameAware interface, the factory calls setBeanName() passing the bean's ID.  If the bean implements the BeanFactoryAware interface, the factory calls setBeanFactory(), passing an instance of itself.  If there are any BeanPostProcessors associated with the bean, their post- ProcessBeforeInitialization() methods will be called.  If an init-method is specified for the bean, it will be called.  Finally, if there are any BeanPostProcessors associated with the bean, their postProcessAfterInitialization() methods will be called.
what is the purpose of Aware Interface	
Factory VS Application Context	ApplicationContext preinstantiates the beans (Singletons) while BeanFactory does lazy initialization.  ApplicationContext provides a means for resolving text messages including support for I18N.  ApplicationContext provide a generic way to load file resources such as images.  ApplicationContext can publish events to beans that are registered as listeners.  Certain operations on the container or beans in the container, which have to be handled in a programmatic fashion with a bean factory, can be handled declaratively in an application context.  ResourceLoader support: Spring's Resource interface is a flexible generic abstraction for handling low-level resources. An ApplicationContext itself is a ResourceLoader, Hence provides an application with access to deployment-specific Resource instances.  MessageSource support: The ApplicationContext implements MessageSource, an interface used to obtain localized messages, with the actual implementation being pluggable.
what is autowiring?	The Spring framework is able to autowire the relationship of beans. Spring wires collaborating beans by inspecting the BeanFactory. Autowiring has four modes: byName. byType. Constructor. autodetect..
what are the scopes of beans?	Singleton: a single bean definition to a single object instance. Prototype: a single bean definition to multiple object instances. Request: a single bean definition to the life of a single HTTP request. Session: a single bean definition to the life of an HTTP session. GlobalSession: a single bean definition to the life of a global HTTP session.
what are the risks of autowiring by type	
what are the different components of Spring	Test Core Container AOP Web Data Access and Integration
how do you get the application context	ClasspathXmlApplicationContext: loads context definition from an xml file located in the classpath.  FilesystemXmlApplicationContext: loads context definition from an xml file located in the filesystem. XmlWebApplicationContext: loads context definition from an xml file located in a web application.
what are the types of dependency injection	Three ways an object can receive a dependency: constructor injection. setter injection. Interface injection. Spring supports constructor and setter injection.
explain AOP	Aspect Orientated Programming is a technique that allows programmers to modularize cross cutting concerns. The core construct of AOP is the Aspect, which is the encapsulation of a cross cutting concern.
what is a cross cutting concern	A cross cutting concern is code that cannot be cleanly decomposed from the business logic.  Example: transaction management takes a lot of set up boilerplate code which clutters the business logic.
after finally vs after returning	After finally advice executes no matter how a join point exits.  After returning advice executes if a join point exits normally.
what is a join point	A join point is a point of execution when the aspect should be executed. A set of join points is called a point cut.
what is spring mvc	Spring Model View Controller is designed around the front controller pattern where a central servlet provides a method for request processing. The actual work is performed by delegate components. The central servlet is the DispatcherServlet.
explain the flow of mvc	Step 1: First request will be received by DispatcherServlet Step 2: DispatcherServlet will take the help of HandlerMapping and get to know the Controller class name associated with the given request Step 3: So request transfer to the Controller, and then controller will process the request by executing appropriate methods and returns ModeAndView object (contains Model data and View name) back to the DispatcherServlet Step 4: Now DispatcherServlet send the model object to the ViewResolver to get the actual view page Step 5: Finally DispatcherServlet will pass the Model object to the View page to display the result
how does the dispatcher servlet know which controllers to go to	The Dispatcher Servlet will take the help of Handler Mapping and get to know the controller class name associated with the given request.
What is JDBC	JDBC Driver is a software component that enables java application to interact with the database.
4 types of JDBC	"JDBC-ODBC bridge driver Native-API driver (partially java driver) Network Protocol driver (fully java driver) Thin driver (fully java driver)"
What are the steps to connect to a database in java?	"Registering the driver class Creating connection Creating statement Executing queries Closing connection"
What are the JDBC API components?	The java.sql package contains interfaces and classes for JDBC API. Interfaces:   Connection Statement  PreparedStatement  ResultSet  ResultSetMetaData  DatabaseMetaData  CallableStatement etc.   Classes: DriverManager, Blob Clob Types, SQLException, etc.
What is the role of JDBC DriverManager class?	The DriverManager class manages the registered drivers. It can be used to register and unregister drivers. It provides factory method that returns the instance of Connection.
What is JDBC Connection interface?	The Connection interface maintains a session with the database. It can be used for transaction management. It provides factory methods that returns the instance of Statement, PreparedStatement, CallableStatement and DatabaseMetaData.
What is the purpose of JDBC ResultSet interface?	The ResultSet object represents a row of a table. It can be used to change the cursor pointer and get the information from the database.
What is JDBC ResultSetMetaData interface?	The ResultSetMetaData interface returns the information of table such as total number of columns, column name, column type etc.
What is JDBC DatabaseMetaData interface?	The DatabaseMetaData interface returns the information of the database such as username, driver name, driver version, number of tables, number of views etc.
What do you mean by batch processing in JDBC?	Batch processing helps you to group related SQL statements into a batch and execute them instead of executing a single query. By using batch processing technique in JDBC, you can execute multiple queries which makes the performance faster.
What is the difference between execute, executeQuery, executeUpdate?	"Statement execute(String query) is used to execute any SQL query and it returns TRUE if the result is an ResultSet such as running Select queries. The output is FALSE when there is no ResultSet object such as running Insert or Update queries. We can use getResultSet() to get the ResultSet and getUpdateCount() method to retrieve the update count. Statement executeQuery(String query) is used to execute Select queries and returns the ResultSet. ResultSet returned is never null even if there are no records matching the query. When executing select queries we should use executeQuery method so that if someone tries to execute insert/update statement it will throw java.sql.SQLException with message "executeQuery method can not be used for update". Statement executeUpdate(String query) is used to execute Insert/Update/Delete (DML) statements or DDL statements that returns nothing. The output is int and equals to the row count for SQL Data Manipulation Language (DML) statements. For DDL statements, the output is 0. You should use execute() method only when you are not sure about the type of statement else use executeQuery or executeUpdate method. In case you are facing any challenges with these java interview questions, please comment your problems in the section below. Apart from this Java Interview Questions Blog, if you want to get trained from professionals on this technology, you can opt for a structured training from edureka! Click below to know more."
What is JDBC?	JDBC is a Java API that is used to connect and execute the query to the database. JDBC API uses JDBC drivers to connect to the database. JDBC API can be used to access tabular data stored into any relational database.
What is JDBC Driver?	JDBC Driver is a software component that enables Java application to interact with the database. There are 4 types of JDBC drivers:JDBC-ODBC bridge driver: The JDBC-ODBC bridge driver uses the ODBC driver to connect to the database. The JDBC-ODBC bridge driver converts JDBC method calls into the ODBC function calls. This is now discouraged because of the thin driver. It is easy to use and can be easily connected to any database.Native-API driver (partially java driver): The Native API driver uses the client-side libraries of the database. The driver converts JDBC method calls into native calls of the database API. It is not written entirely in Java. Its performance is better than JDBC-ODBC bridge driver. However, the native driver must be installed on each client machine.Network Protocol driver (fully java driver): The Network Protocol driver uses middleware (application server) that converts JDBC calls directly or indirectly into the vendor-specific database protocol. It is entirely written in Java. There is no requirement of the client-side library because of the application server that can perform many tasks like auditing, load balancing, logging, etc.Thin driver (fully java driver): The thin driver converts JDBC calls directly into the vendor-specific database protocol. That is why it is known as the thin driver. It is entirely written in Java language. Its performance is better than all other drivers however these drivers depend upon the database.""
What are the JDBC API components?	The java.sql package contains following interfaces and classes for JDBC API.Interfaces:Connection: The Connection object is created by using getConnection() method of DriverManager class. DriverManager is the factory for connection.Statement: The Statement object is created by using createStatement() method of Connection class. The Connection interface is the factory for Statement.PreparedStatement: The PrepareStatement object is created by using prepareStatement() method of Connection class. It is used to execute the parameterized query.ResultSet: The object of ResultSet maintains a cursor pointing to a row of a table. Initially, cursor points before the first row. The executeQuery() method of Statement interface returns the ResultSet object.ResultSetMetaData: The object of ResultSetMetaData interface cotains the information about the data (table) such as numer of columns, column name, column type, etc. The getMetaData() method of ResultSet returns the object of ResultSetMetaData.DatabaseMetaData: DatabaseMetaData interface provides methods to get metadata of a database such as the database product name, database product version, driver name, name of the total number of tables, the name of the total number of views, etc. The getMetaData() method of Connection interface returns the object of DatabaseMetaData.CallableStatement: CallableStatement interface is used to call the stored procedures and functions. We can have business logic on the database through the use of stored procedures and functions that will make the performance better because these are precompiled. The prepareCall() method of Connection interface returns the instance of CallableStatement.Classes:DriverManager: The DriverManager class acts as an interface between the user and drivers. It keeps track of the drivers that are available and handles establishing a connection between a database and the appropriate driver. It contains several methods to keep the interaction between the user and drivers.Blob: Blob stands for the binary large object. It represents a collection of binary data stored as a single entity in the database management system.Clob: Clob stands for Character large object. It is a data type that is used by various database management systems to store character files. It is similar to Blob except for the difference that BLOB represent binary data such as images, audio and video files, etc. whereas Clob represents character stream data such as character files, etc.SQLException It is an Exception class which provides information on database access errors."
What are the JDBC statements?	In JDBC, Statements are used to send SQL commands to the database and receive data from the database. There are various methods provided by JDBC statements such as execute(), executeUpdate(), executeQuery, etc. which helps you to interact with the database.
What is the return type of Class.forName() method?	The Class.forName() method returns the object of java.lang.Class object.
How can we set null value in JDBC PreparedStatement?	By using setNull() method of PreparedStatement interface, we can set the null value to an index. The syntax of the method is given below.void setNull(int parameterIndex, int sqlType) throws SQLException""
What are the benefits of PreparedStatement over Statement?	The benefits of using PreparedStatement over Statement interface is given below.The PreparedStatement performs faster as compare to Statement because the Statement needs to be compiled everytime we run the code whereas the PreparedStatement compiled once and then execute only on runtime.PreparedStatement can execute Parameterized query whereas Statement can only run static queries.The query used in PreparedStatement is appeared to be similar every time. Therefore, the database can reuse the previous access plan whereas, Statement inline the parameters into the String, therefore, the query doesn't appear to be same everytime which prevents cache reusage."
What are the different types of ResultSet?	ResultSet is categorized by the direction of the reading head and sensitivity or insensitivity of the result provided by it. There are three general types of ResultSet.
How can we execute stored procedures using CallableStatement?	Following are the steps to create and execute stored procedures. Here, we are creating a table user420 by using a stored procedure and inserting values into it.Create the procedure in the database.To call the stored procedure, you need to create it in the database. Here, we are assuming that the stored procedure looks like this.create or replace procedure ""INSERTR"" (id IN NUMBER, name IN VARCHAR2) is begin insert into user420 values(id,name); end; / The table structure is given below:create table user420(id number(10), name varchar2(200)); Establish a network connection.Class.forName(""oracle.jdbc.driver.OracleDriver""); Connection con=DriverManager.getConnection( ""jdbc:oracle:thin:@localhost:1521:xe"",""system"",""oracle""); Create the Object of CallableStatement.CallableStatement stmt=con.prepareCall(""{call insertR(?,?)}""); Provide the values and execute the query by using the following syntax.stmt.setInt(1,1011); stmt.setString(2,""Amit""); stmt.execute(); Check the database; the values will be found there. However, the complete code will look like the following.import java.sql.*; public class Proc { public static void main(String[] args) throws Exception{ Class.forName(""oracle.jdbc.driver.OracleDriver""); Connection con=DriverManager.getConnection( ""jdbc:oracle:thin:@localhost:1521:xe"",""system"",""oracle""); CallableStatement stmt=con.prepareCall(""{call insertR(?,?)}""); stmt.setInt(1,1011); stmt.setString(2,""Amit""); stmt.execute(); System.out.println(""success""); } } "
What is the role of the JDBC DriverManager class?	The DriverManager class acts as an interface between user and drivers. It keeps track of the drivers that are available and handles establishing a connection between a database and the appropriate driver. The DriverManager class maintains a list of Driver classes that have registered themselves by calling the method DriverManager.registerDriver().
What are the functions of the JDBC Connection interface?	The Connection interface maintains a session with the database. It can be used for transaction management. It provides factory methods that return the instance of Statement, PreparedStatement, CallableStatement, and DatabaseMetaData.
What does the JDBC ResultSet interface?	The ResultSet object represents a row of a table. It can be used to change the cursor pointer and get the information from the database. By default, ResultSet object can move in the forward direction only and is not updatable. However, we can make this object to move the forward and backward direction by passing either TYPE_SCROLL_INSENSITIVE or TYPE_SCROLL_SENSITIVE in createStatement(int, int) method.
What does the JDBC ResultSetMetaData interface?	The ResultSetMetaData interface returns the information of table such as the total number of columns, column name, column type, etc.
What does the JDBC DatabaseMetaData interface?	The DatabaseMetaData interface returns the information of the database such as username, driver name, driver version, number of tables, number of views, etc. Consider the following example.
Which interface is responsible for transaction management in JDBC?	The Connection interface provides methods for transaction management such as commit(), rollback() etc."
What is batch processing and how to perform batch processing in JDBC?	By using the batch processing technique in JDBC, we can execute multiple queries. It makes the performance fast. The java.sql.Statement and java.sql.PreparedStatement interfaces provide methods for batch processing. The batch processing in JDBC requires the following steps.Load the driver classCreate ConnectionCreate StatementAdd query in the batchExecute the BatchClose ConnectionConsider the following example to perform batch processing using the Statement interface."
What are CLOB and BLOB data types in JDBC?	BLOB: Blob can be defined as the variable-length, binary large object which is used to hold the group of Binary data such as voice, images, and mixed media. It can hold up to 2GB data on MySQL database and 128 GB on Oracle database. BLOB is supported by many databases such as MySQL, Oracle, and DB2 to store the binary data (images, video, audio, and mixed media).CLOB: Clob can be defined as the variable-length, character-large object which is used to hold the character-based data such as files in many databases. It can hold up to 2 GB on MySQL database, and 128 GB on Oracle Database. A CLOB is considered as a character string.""
What are the different types of lockings in JDBC?	A lock is a certain type of software mechanism by using which, we can restrict other users from using the data resource. There are four type of locks given in JDBC that are described below.Row and Key Locks: These type of locks are used when we update the rows.Page Locks: These type of locks are applied to a page. They are used in the case, where a transaction remains in the process and is being updated, deleting, or inserting some data in a row of the table. The database server locks the entire page that contains the row. The page lock can be applied once by the database server.Table locks: Table locks are applied to the table. It can be applied in two ways, i.e., shared and exclusive. Shared lock lets the other transactions to read the table but not update it. However, The exclusive lock prevents others from reading and writing the table.Database locks: The Database lock is used to prevent the read and update access from other transactions when the database is open.