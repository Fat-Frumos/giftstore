How to ensure that Microservices are loosely coupled and highly cohesive	To ensure loose coupling and high cohesion in Microservices, you can follow certain practices such as defining clear service boundaries, using lightweight communication protocols like REST or messaging queues, implementing domain-driven design principles, and adopting decentralized governance and autonomous teams.
How does a Java Microservice and .NET Microservice can talk with each other	Java Microservices and .NET Microservices can communicate with each other through interoperable protocols such as HTTP or messaging queues. They can expose APIs using standard formats like JSON or XML, allowing them to exchange data and messages seamlessly across different programming languages and platforms.
How to handle cross-cutting concerns, such as security, in a Microservices architecture	In a Microservices architecture, cross-cutting concerns like security can be handled by implementing a centralized security service or using API gateways. These components can enforce authentication, authorization, and other security mechanisms at the entry point of each Microservice, ensuring consistent and secure access control across the system.
Why debugging is tough in Microservice Architecture	Debugging in Microservice Architecture can be challenging due to the distributed nature of the system. With multiple services interacting asynchronously, pinpointing the root cause of an issue requires tracing requests across different Microservices and correlating logs from various components. Proper monitoring, logging, and observability practices, along with distributed tracing tools, can help alleviate the debugging complexities.
How to handle data consistency in a Microservices architecture	In a Microservices architecture, ensuring data consistency can be achieved through various approaches. One common approach is to use a distributed transaction management framework like Saga pattern or Eventual consistency. Alternatively, you can employ event-driven architecture and event sourcing, where each service maintains its own local view of data and communicates changes through events, ensuring eventual consistency across the system.
How to ensure Microservices are scalable and resilient	To ensure scalability and resilience in Microservices, you can employ techniques such as horizontal scaling, containerization using tools like Docker and orchestration platforms like Kubernetes, implementing circuit breakers and retries, and utilizing load balancing strategies. Additionally, designing services to be stateless and employing fault tolerance mechanisms can enhance the scalability and resilience of the system.
How to handle service discovery and registration in a Microservices architecture	Service discovery and registration can be managed using tools like service registries (e.g., Netflix Eureka, HashiCorp Consul) or through service mesh frameworks (e.g., Istio, Linkerd). These tools provide capabilities for service registration, discovery, and load balancing, enabling services to locate and communicate with each other dynamically.
How to handle service communication and data sharing in a Microservices architecture	Service communication and data sharing in a Microservices architecture can be facilitated through lightweight communication protocols like RESTful APIs or messaging queues. Services can exchange data either through synchronous request-response interactions or asynchronous event-driven patterns, allowing for decoupled and scalable communication between services.
How to handle service versioning and backward compatibility in a Microservices architecture	To handle service versioning and backward compatibility, you can adopt practices such as using semantic versioning, maintaining well-defined and stable APIs, implementing backward-compatible changes or introducing new versions with graceful migration strategies. Additionally, employing API versioning techniques like URL versioning or using content negotiation mechanisms can help manage compatibility between services.
How to monitor and troubleshoot Microservices	Monitoring and troubleshooting Microservices involve implementing robust logging and monitoring practices, utilizing distributed tracing tools, setting up centralized logging and monitoring systems, and employing health checks and metrics. These practices allow you to track service performance, detect issues, and troubleshoot problems across the distributed environment.
How to handle deployments and rollbacks in a Microservices architecture	Deployments in a Microservices architecture can be managed using containerization technologies like Docker and container orchestration platforms like Kubernetes. With containerization, you can package each Microservice as an independent unit and deploy them individually. Rollbacks can be handled by maintaining versioned containers or utilizing deployment strategies that support rollback mechanisms.
How to handle testing and continuous integration in a Microservices architecture	In Microservices architecture, testing and continuous integration should be performed at the service level. Each Microservice should have its own automated tests, including unit tests, integration tests, and contract tests. Continuous integration pipelines can be set up for each service, enabling automated builds, tests, and deployments, ensuring the quality and stability of individual services.
What is a Microservices architecture and how does it differ from a monolithic architecture	Microservices architecture is an architectural style where an application is decomposed into a collection of small, loosely coupled, and independently deployable services. Each Microservice focuses on a specific business capability and communicates with other services through lightweight protocols. In contrast, a monolithic architecture is a traditional approach where the entire application is developed and deployed as a single unit. Microservices offer benefits such as scalability, independent deployment, technological flexibility, and the ability to build complex systems by composing smaller services.
Contract first approach	Various approaches available for developing SOAP-based web services. A method available for developing SOAP-based web services. The contract is first defined by XML and WSDL, and then Java classes are derived from the contract.
What is JPA?	Used for working with relational data. It's a specification not implementation. Offers independence to developers. 1 API to support many relational DB.
Hibernate	an ORM tool that provides the framework for mapping an OOD model (obj oriented domain). It generates SQL calls
Persistence	This layer is a group of files that are used to communicate between the application and the DB
Spring Data Repository	This provides an implementation of repository pattern. It also allows easy substitution of the persistence layer (ie going from SQL to NoSQL)
Repository	stores methods for retrieving domain objects should delegate to a specialized repository obj such that alternative storage implementation may be interchanged
Spring Data JPA	Uses hibernate for persistence to support Relational DB (RDBS) systems. Provides the implementation at run time with no SQL req.
CRUD Repository	takes in type and Id
Spring Bean	This is responsible for managing the lifecycle of beans created through the spring container. The bean lifecycle consists of post-initialization and pre-destruction callback methods
What is Docker?	a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package
SOAP API	Is a standard communication protocol. Take the advantages of making web based protocols such as HTTP and its XML that are already operating the all operating systems that are why its developers can easily manipulate web services and get responses without caring about language and platforms at all. (envelope)
REST API	Is an architectural style for web services that acts like a channel of communication between computers and systems on the internet. (postcard)
SonarQube	Used to measure and analyze the source code quality. Scans for vulnerabilities and code errors.
What is Loose Coupling?	The approach in which components of an application are interconnected to each other in least dependent way. In Spring Framework it is achieved by a core feature called Dependency Injection
What is Java Dependencies Injection?	design pattern allows us to remove the hard-coded dependencies and make our application loosely coupled, extendable and maintainable. We can implement dependency injection in java to move the dependency resolution from compile-time to runtime.
Complie-Time	The instance where the code you entered is converted to executable
Runtime	The instance where the executable is running
Bootstrap	Is a potent front-end framework used to create modern websites and web apps.
Aspect-Oriented Programming (AOP)	An approach to programming that allows global properties of a program to determine how it is compiled into an executable program
Thymeleaf	is a Java-based library used to create a web application. It provides a good support for serving a XHTML/HTML5 in web applications. Spring Boot
JDK	A tool necessary to compile, document, and package Java programs. Contains JRE + development tools
JRE	Refers to a runtime environment in which Java bytecode can be executed. An implementation of the JVM which physically exisits
JVM	An abstract machine. It's a specification that provides a runtime environment in which Java bytecode can be executed. It follows 3 notations: Specification, Implementation ad Runtime Instance.
Static	Is a keyword that identifies that it is class based. only these can be invoked via the class
Main	Is made static so that the compiler doesn't throw an error stating that this function is called by the JVM before any objs are made.
Void	It is a return type of a method which will not return any value.
Java platform is independent	Because of its byte codes which can run on any system. Irrespective of its underlying operating system.
Java is not 100% object oriented	Because it makes use of 8 primitive data types such as boolean, byte, char, int, float, double, long, short which are not objects.
Wrapper Classes	They convert the Java primitives into the reference types(objs). They wrap the primitive data type into an obj of that class.
Default Constructor	It does not take any inputs ( no args). Its purpose is to initialize the instance variables w/ default values. Used for obj creation.
Parameterized Constructor	is capable of initializing the instance variableswith the provided values
Singleton Class	A design pattern that has only one instance that can be created anytime in one JVM. Can be made this by making its constructor private.
ArrayList	Not synchronized, fast b/c it is not synchronized, when element added the size of it increases by 50%. Does not define the increment size. Only use iterator for traversing it.
Vector	Synchronized. Slow since it is thread safe, defaults to doubling size of its array. Defines the increment size, can use both enumeration and iterator for transversing.
Equals()	a method that is defined in Obj class and is used for checking equality of two objs defined by business logic.
= =	a binary operator that is used to compare primitives and obj.
Stack Memory	Is used only by one thread of execution. Cant be accessed by other threads. Follows LIFO manner to free memory. Exists until end of execution of the thread. Only contains local primitive and reference variables to obj in heap space.
Heap Memory	used by all the parts of the application. Objects stored in the head are globally accessible. mem management is based on the generation associated w/ each obj. Lives from start to the end of application execution. whenever an obj is created its always stored in heap space
Packages	A collection of related classes and interfaces which are bundled together. Makes it easier for reuse.
JIT Compiler (Just_In-Time)	It is a program that helps in converting the Java bytecode into instructions that are sent directly to the processor. By default, the JIT compiler is enabled in Java and is activated whenever a Java method is invoked.
Access Modifiers	special keywords which are used to restrict the access of a class, constructor, data member and method in another class. (Default, Private, Protected, and Public)
Default Modifier	works with the same class, same package subclass, same package non-subclass. Does not work with different package subclass or different package non subclass
Private Modifier	Works with the same class. Does not work with same package subclass, same package non-subclass, different package subclass or different package non subclass
Protected Modifier	works with the same class, same package subclass, same package non-subclass., different package subclass. Does not work with different package non subclass
Public Modifier	Works with the same class, same package subclass, same package non-subclass, different package subclass and different package non subclass
Object	Is a real worl entity that has a state and behavior. 3 characteristics: State, Behavior, ad Identity.
OOP (Obj Oriented Programing)	a programming model or approach where the programs are organized around objects rather than logic and functions. mainly focuses on the objects that are required to be manipulated instead of logic. This approach is ideal for the programs large and complex codes and needs to be actively updated or maintained.
Inheritance	(OOP) is a process where one class acquires the properties of another.
Encapsulation	is a mechanism of wrapping up the data and code together as a single unit.
Abstraction	is the methodology of hiding the implementation details from the user and only providing the functionality to the users.
Polymorphism	the ability of a variable, function or object to take multiple forms.
Constructors	Used to initialize the state of an obj. Does not have any return type. Is invoked implicitly. A default is provided by the compiler if the class has none. The name must always be the same as the class name.
ArrayLIst	Can contain values of different data types. Size can be dynamically changes. No need to specify the index. Is a type. Can contain only objs, no primitive data types allowed.
Local Variable	typically used inside a method, constructor, or a block and has only local scope. Thus, this variable can be used only within the scope of a block. The best benefit of having a this is that other methods in the class won't be even aware of that variable.
Instance Variable	is a variable which is bounded to its object itself. These variables are declared within a class, but outside a method. Every object of that class will create it's own copy of the variable while using it. Thus, any changes made to the variable won't reflect in any other instances of that class and will be bound to that particular instance only.
Methods	Used to rep. the behavior of an obj. Must have a return type. Needs to be invoked explicitly. No default is provided by the compiler. The name may or may not be the same as class name.
Array	Cannot contain values of different data types. Size mustbe defined at the time of declaration. Need to specify the index in order to add data. Are not type parameterized. Can contain primitive data types as well as objs.
ArrayList	Can contain values of different data types. Size can be dynamically changed. No need to specify the index. Are type. Can contain only objects, no primitive data types are allowed,
can contain only objects, no primitive data types are allowed	means once the String object is created its state cannot be modified. Whenever you try to update the value of that object instead of updating the values of that particular object, Java creates a new string object. Java String objects are immutable as String objects are generally cached in the String pool. Since String literals are usually shared between multiple clients, action from one client might affect the rest. It enhances security, caching, synchronization, and performance of the application.
SOAP Web services	is defined as an XML-based protocol. It is known for designing and developing web services as well as enabling communication between applications developed on different platforms using various programming languages over the Internet. It is both platform and language independent.
How SOAP work	is used to provide a user interface that can be accessed by the client object, and the request that it sends goes to the server, which can be accessed using the server object. The user interface creates some files or methods consisting of server object and the name of the interface to the server object. It also contains other information such as the name of the interface and methods. It uses HTTP to send the XML to the server using the POST method, which analyzes the method and sends the result to the client. The server creates more XML consisting of responses to the request of user interface using HTTP. The client can use any approach to send the XML, like the SMTP server or POP3 protocol to pass the messages or reply to queries.
when to use SOAP API	to create, retrieve, update, or delete records, like accounts, leads, and use-defined objects. With more than 20 different calls, you can also use the it to manage passwords, perform searches, etc. by using it in any language that supports web services.
PutAddress()	Facilities provided by SOAP. It is used to enter an address in the webpage and has an address instance on the SOAP call.
PutListing()	Facilities provided by SOAP. It is used to allow the insertion of a complete XML document into the web page. It receives the XML file as an argument and transports the XML file to XML parser liaison, which reads it and inserts it into the SOAP call as a parameter.
GetAddress()	Facilities provided by SOAP. It is used to get a query name and gets the result that best matches a query. The name is sent to the SOAP call in the form of text character string.
GetAllListing()	Facilities provided by SOAP. It is used to return the full list in an XML format.
Major obstacle users faced when using SOAP	When using SOAP, users often see the firewall security mechanism as the biggest obstacle. This block all the ports leaving few like HTTP port 80 and the HTTP port used by SOAP that bypasses the firewall. The technical complaint against SOAP is that it mixes the specification for message transport with the specification for message structure. (most popular)
Contract-last approach	Various approaches available for developing SOAP-based web services. A method available for developing SOAP-based web services. Java classes are first defined, and then the contract is generated, which is normally the WSDL file from the Java class.
Envelope	Elements of a SOAP message structure. It is an obligatory root element that translates the XML document and defines the beginning and end of the message.
Header	Elements of a SOAP message structure. It is an optional item which contains information about the message being sent.
Body	Elements of a SOAP message structure. It contains the XML data comprising the message being sent.
Fault	Elements of a SOAP message structure. It provides the information on errors that occurred while during message processing.
Syntax rules for a SOAP message	Must use encoded XML. Envelope namespace must be used. Encoding namespace must be used. Must not consist of a DTD reference. Must not have XML processing instruction.
Transport method in SOAP	Application layer and transport layers of a network are used by SOAP; HTTP and SMTP are the valid protocol of the application layer used as the transport for SOAP. HTTP is more preferable, since it works well with the current Internet infrastructure, in particular with firewalls. The SOAP requests can be sent using an HTTP GET method while the specification only contains details about HTTP POST.
Characteristics of a SOAP envelope element	SOAP message has a root Envelope element. Envelope is an obligatory part of the SOAP message. If an envelope includes a header element, it should not contain more than one. Envelop version will change if the SOAP version changes. The SOAP envelope is indicated by the prefix ENV and the envelope element. The optional SOAP encoding is also specified using a namespace and the optional encoding style element.
Amazon Web Services (AWS)	offer several advantages, including increased scalability, reliability, security, and inexpensive cloud computing services
Call	Major functionalities provided by the SOAP protocol class. A class which provides the main functionality for a remote method for which a call is needed. It is used to create the call() and to specify the encoding style of the registry that will be assigned when if necessary. This call() function is used by the RPC call, which represents the options of the call object.
Deployment Descriptor	Major functionalities provided by the SOAP protocol class. A class used to provide the information about the SOAP services. It enables easy deployment without the need for other approaches.
DOM2 Writer	Major functionalities provided by the SOAP protocol class. A class that serializes and uses DOM node as XML string to provide more functionalities.
RPC Message	Major functionalities provided by the SOAP protocol class. A class used as the base class that calls and replies to the request submitted to the server.
Service Manager	Major functionalities provided by the SOAP protocol class. A class that provides, lists and then outputs all SOAP services.
HTTPUtils	Web relation functionalities provided by SOAP protocol. This provides the functionality of the POST method to safely meet the requirements.
Response	Web relation functionalities provided by SOAP protocol. It is an object that represents an RPC reply from both client and server, but the result will not be displayed until after the method call.
Parameter	Web relation functionalities provided by SOAP protocol. It is an argument for a RPC call used by both the client and the server.
TCPTunnel	Web relation functionalities provided by SOAP protocol. It is an object that provides the ability to listen on a specific port and to forward all the host and port names.
TypeConverter	Web relation functionalities provided by SOAP protocol. It helps to convert an object of one type into another type and this is called using the class in the form object.