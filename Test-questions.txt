@EnableScheduling?	is used to enable scheduling capabilities. It allows you to schedule tasks or methods to run at specific intervals or at predefined times, providing a way to automate repetitive tasks.
@RequestBody annotation's RESTful APIs?	is used to bind the request body to a method parameter's RESTful APIs. It allows you to extract data from the request payload and convert it into an object that can be used within the method.
@EnableAspectJAutoProxy?	is used to enable support for AspectJ-based aspect-oriented programming. It allows you to use aspects to separate cross-cutting concerns from the core business logic of your application.
@RequestMapping annotation's RESTful APIs?	is used to map HTTP requests to handler methods's RESTful APIs. It defines the URL path and the HTTP methods that the method should handle, allowing you to create RESTful endpoints.
@PathVariable annotation's RESTful APIs?	is used to bind a URL path variable to a method parameter's RESTful APIs. It allows you to extract dynamic values from the URL and use them within the method.
@EnableRetry?	is used to enable automatic retry capabilities. It allows you to annotate methods with @Retryable to define retry behavior for specific operations, providing resilience against transient failures.
@ModelAttribute annotation's MVC?	is used to bind method parameters or method return values to model attributes's MVC framework. It allows you to pass data between the controller and view, making it accessible within the view template.
@Async annotation's asynchronous programming?	is used to mark a method as asynchronous. It allows the method to be executed in a separate thread, improving performance and responsiveness of the application.
@EnableWebMvc?	is used to enable Spring MVC configuration. It provides the necessary configuration for web-based applications, including request mapping, view resolution, and handling of static resources.
@ResponseStatus annotation's RESTful APIs?	is used to define the HTTP status code returned by a Spring Boot RESTful API method. It allows you to customize the status code based on the outcome of the method execution.
@Configuration?	is used to indicate that a class is a configuration class. It is used along with other annotations, such as @Bean, to define and configure beans and other application components.
@CrossOrigin annotation's RESTful APIs?	is used to enable Cross-Origin Resource Sharing (CORS)'s RESTful APIs. It allows web clients from different origins to make requests to the API, overcoming the same-origin policy restrictions of web browsers.
What is the difference between @RestController and @Controller?	Is a specific version of the @Controller annotation that is used MVC to implement RESTful web services. It combines the @Controller and @ResponseBody annotations, making it convenient for building REST APIs.
@SpringBootApplication?	 used to mark the main class of a Spring Boot application. It combines several annotations, including @Configuration, @EnableAutoConfiguration, and @ComponentScan, providing a convenient way to bootstrap a Spring application.
Explain the difference between @Component, @Service, and @Repository annotations	are used for component scanning and auto-detection. @Component is a generic annotation for any Spring-managed component, @Service is used to annotate service layer components, and @Repository is used for DAO (Data Access Object) components.
@Value? How is it used? 	is used to inject values from properties files or configuration files into Spring Boot beans. It allows you to access properties or configuration values directly in your code by providing the key of the property or configuration.
@EnableAutoConfiguration?	is used to enable Spring Boot's auto-configuration feature. It automatically configures beans and dependencies based on the classpath, reducing the need for explicit configuration.
@SpringBootTest annotation testing?	is used to bootstrap the application context for integration tests. It loads the complete Spring application context, including all beans and configurations, allowing you to perform integration tests on the application.
@EnableJpaRepositories?	 is used to enable JPA repository support. It scans for Spring Data JPA repositories and automatically creates the necessary implementation based on defined interfaces.
@RestControllerAdvice?	is used to define global exception handling and response customization for RESTful APIs. It allows you to handle exceptions centrally and provide consistent error responses across the application.
@ConfigurationProperties?	is used to bind external configuration properties to Spring Boot beans. It simplifies the process of reading and validating properties from various sources, such as properties files or environment variables.
Explain the role of Spring Boot's @Conditional annotations and provide examples.	 are used to conditionally enable or disable bean creation or configuration based on specific conditions. Examples include @ConditionalOnProperty, @ConditionalOnClass, and @ConditionalOnExpression, which allow you to customize the application's behavior based on the environment or classpath conditions.
@EnableCaching?	 is used to enable caching capabilities. It allows you to cache method results, improving performance by reducing the need to execute the same method multiple times.
@EnableTransactionManagement?	 is used to enable transaction management. It allows you to annotate methods with @Transactional to define transactional boundaries, ensuring atomicity, consistency, isolation, and durability of database operations.
@EntityScan?	 is used to specify the base packages to scan for entity classes's JPA (Java Persistence API). It helps to locate and register entity classes for database operations.
Explain the purpose of the @Entity and @Table annotations's JPA.	is used to mark a class as a persistent entity in JPA. It represents a table in the database and enables the mapping of object-oriented entities to database tables. The @Table annotation is used to specify the details of the corresponding database table, such as the table name and schema.
When do you want to use @SpringBootTest?	For Spring Boot JUnit integration tests
What is required to use @SpringBootTest with JUnit 4?	@RunWith(SpringRunner.class)
How are mocked bean injected with @SpringBootTest?	@MockBean
How are spies injected with @SpringBootTest?	@SpyBean
In what two formats is the Web environment supplied to @SpringBootTest?	Mocked, embedded
How can the context be customized with @SpringBootTest?	@TestConfiguration annotated classes
What are five test auto configurations supported by @SpringBootTest?	MVC, JSON, JPA, JDBC, MongoDB
What does @SpringBootTest auto-configure?	ApplicationContext, test itself
What nine useful test modules does spring-boot-starter-test bring to the classpath?	JUnit, Spring Test, Spring Boot Test, AssertJ, Hamcrest, Mockito, JSONassert, JsonPath, XMLUnit
What is the minimum requirement for any integration test?	It should test at least two non-mocked components
What are two ways to write integration tests for a Spring Boot web application?	@AutoConfigureMockMvc, @SpringBootTest(webEnvironment)
When do you want to use @WebMvcTest?	When you want a web-layer integration test
What two cases does @WebMvcTest support?	@WebMvcTest(SomeController.class), @WebMvcTest
What nine resource types does @WebMvcTest auto-configure?	Mock Mvc, @Controller, @ControllerAdvice, @JsonComponent, @Converter, @GenericConverter, @Filter, @WebMvcConfigurer, @HandlerMethodArgumentResolver annotated classes
What is the main difference between @MockBean and @Mock?	@MockBean creates and injects into Application Context, while @Mock only creates the mocked bean, which is injected into the target class with @InjectMocks
When do you use @DataJpaTest?	For integration tests of JPA components Entities and Repositories
What four things does @DataJpaTest auto-configure?	In-memory embedded database, @Entity beans, Spring Data Repositories, TestEntityManager
How do you disable the auto-configuration of the in-memory embedded database in @DataJpaTest?	@AutoConfigureTestDatabase(replace = Replace.NONE)
True or false: Every @DataJpaTest is transactional by default	True
What four things are ReflectionTestUtils methods useful for?	Changing the value of a constant, changing the value of a non-public field, invoking a non-public setter method, invoking a non-public configuration or lifecycle callback method
What are the five packages provided by Spring that are useful for unit tests?	org.springframework.{ test.util, test.web, mock.env, mock.jndi, mock.web }
What type of tests typically use Spring?	Integration tests
What are the four goals of Spring's integration testing support?	Spring container caching between tests, dependency injection of test fixture instances, transaction management, Spring-specific base classes to assist writing tests
What Spring test annotation is used to determine how to load and configure an ApplicationContext for integration tests?	@ContextConfiguration
What is Spring test annotation @BootstrapWith for?	For low-level control of how the Spring TestContext Framework is created
What are the four modes of @DirtiesContext at the class level?	BEFORE_CLASS, BEFORE_EACH_TEST_METHOD, AFTER_EACH_TEST_METHOD, AFTER_CLASS
What is the default mode of @DirtiesContext at the class level?	AFTER_CLASS
What are the two modes of @DirtiesContext at the method level?	BEFORE_METHOD, AFTER_METHOD
What is the default mode of @DirtiesContext at the method level?	AFTER_METHOD
Which Spring test class-level annotation is used to declare which bean definition profiles should be active when loading an ApplicationContext for an integration test?	@ActiveProfiles
What is Spring class-level test annotation @TestPropertySource for?	To give the locations of properties files and inlined properties to be added to the set of PropertySources in the Environment for an integration test ApplicationContext
What is Spring class-level test annotation @WebAppConfiguration for?	To declare that the ApplicationContext loaded for an integration test should be a WebApplicationContext that uses a MockServletContext
What two Spring test annotations can be used to commit after a transactional test method has completed?	@Commit, @Rollback(false)
Which Spring test annotation is used is used to configure SQL scripts to be run against a given database during integration tests?	@Sql
Which Spring test annotation is used is used to aggregate several @Sql annotations?	@SqlGroup
What are the four Spring test SQL annotations?	@Sql, @SqlGroup, @SqlConfig, @SqlMergeMode
How can you create a shared application context in a JUnit integration test?	Include a reference to the application configuration class either by extending it in a test base class or including it in the @ContextConfiguration on an annotation, public abstract class or interface
What annotation can be used to force Spring to create a new application context in a test?	@DirtiesContext
When do you use @Transactional in testing?	To mark code that should execute under a transaction and maybe rollback, allowing other tests use clear state
How are mocked beans configured for Mockito or EasyMock integration tests?	A public static inner @Configuration class with a @Bean method that returns a mocked subject
What three setup elements are required in Mockito unit tests?	@RunWith(MockitoJUnitRunner.class), @InjectMocks for the subject, @Mock for the mocked subject dependencies
What three setup elements are required in EasyMock unit tests?	@RunWith(EasyMockRunner.class), @TestSubject for the subject, @Mock for the mocked subject dependencies
How can you add configuration to a Spring Boot test?	A nested @TestConfiguration class
How can you exclude Spring Boot test configuration classes from being picked up by @ComponentScan?	@TestConfiguration on the top of a class in src/test/java
How can you test a mock server environment with @SpringBootTest?	@AutoConfigureMockMvc, annotate any MockMvc fields with @Autowired
How can you test only the web layer with @SpringBootTest?	@WebMvcTest
How can you test only a controller, SomeController, with @SpringBootTest?	@WebMvcTest(SomeController.class)
How can you test with a running server with @SpringBootTest?	@SpringBootTest(webEnvironment=WebEnvironment.*)
With what nine features does Spring Boot simplify writing tests?	@SpringBootTest, @MockBean, @SpyBean, @WebMvcTest, provides web environments, provides algorithm for Tests environment auto-configuration, offers test auto-configurations for many commonly-used technology, spring-boot-starter-test module, @ConditionalOn... annotations
How does @SpringBootTest interact with @SpringBootApplication and @SpringBootConfiguration?	@SpringBootTest uses SpringBootTestContextBootstrapper to locate the @SpringBootConfiguration annotated class that SpringBootContextLoader converts to an ApplicationContext
What are the four WebEnvironment modes for @SpringBootTest(webEnvironment)?	MOCK (default), RANDOM_PORT, DEFINED_PORT, NONE
What six things can @SpringBootTest do?	Can use SpringBootContextLoader as the ContextLoader, searches for a @SpringBootConfiguration, offers Environment properties attribute, offers args attribute, supports webEnvironment, registers TestRestTemplate and WebTestClient beans